// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Material.fx
// Namespace = Xen.Ex.Material

namespace Xen.Ex.Material
{
	
	/// <summary><para>Technique 'vs0' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 30 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs0 : Xen.Graphics.ShaderSystem.BaseShader, IMS_Base
	{
		/// <summary>Construct an instance of the 'vs0' shader</summary>
		public vs0()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs0.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs0.cid0 = state.GetNameUniqueID("v_SH");
			vs0.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs0.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			vs0.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs0.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs0.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs0.tid0 = state.GetNameUniqueID("CustomTexture");
			vs0.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs0.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs0.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs0.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs0.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs0.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs0.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs0.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs0.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs0.fx, vs0.fxb, 32, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0.vin[i]));
			index = vs0.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,108,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,72,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,240,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,88,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,124,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,160,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,84,1,0,1,0,1,1,1,112,138,0,0,1,14,1,252,1,0,1,0,1,15,1,24,138,0,0,1,15,1,100,1,0,1,0,1,15,1,120,138,0,0,1,15,1,136,1,0,1,0,1,15,1,156,138,0,0,1,16,1,96,135,0,0,1,3,1,0,1,0,1,15,1,220,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,176,1,0,1,0,1,15,1,172,131,0,0,1,93,134,0,0,1,15,1,200,1,0,1,0,1,15,1,196,1,0,1,0,1,16,1,16,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,228,1,0,1,0,1,15,1,224,131,0,0,1,93,134,0,0,1,15,1,252,1,0,1,0,1,15,1,248,1,0,1,0,1,16,1,80,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,36,1,0,1,0,1,16,1,32,131,0,0,1,93,134,0,0,1,16,1,60,1,0,1,0,1,16,1,56,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,4,1,124,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,116,1,0,1,0,1,2,1,8,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,200,1,0,1,81,1,0,1,6,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,12,1,0,1,8,1,0,1,13,1,0,1,9,1,0,1,14,1,0,1,10,1,0,1,47,1,0,1,11,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,31,131,0,0,1,32,1,0,1,0,1,16,1,33,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,26,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,27,1,0,1,0,1,16,1,25,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,16,1,11,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,12,1,194,1,0,1,18,133,0,0,1,32,1,18,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,80,1,32,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,6,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,6,1,4,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,6,1,5,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,6,1,2,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,4,1,0,1,177,1,180,1,0,1,225,1,1,1,4,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,5,1,4,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,18,1,224,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,172,1,0,1,0,1,3,1,52,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,244,1,0,1,81,1,0,1,8,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,7,1,0,1,0,1,48,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,16,1,10,1,0,1,32,1,32,1,11,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,56,131,0,0,1,57,1,0,1,0,1,16,1,58,1,0,1,0,1,16,1,61,1,0,1,0,1,16,1,50,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,49,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,7,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,16,1,36,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,16,1,61,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,8,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,8,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,6,1,14,1,0,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,6,1,15,1,0,1,92,1,15,1,0,1,5,1,160,1,27,1,136,1,177,1,161,1,6,1,16,1,8,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,6,1,16,1,5,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,14,1,4,1,92,1,2,1,0,1,8,1,0,131,27,0,1,161,1,1,1,0,1,8,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,14,1,4,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,6,1,16,1,5,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,8,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,6,1,16,1,5,1,200,1,15,1,0,1,2,1,160,1,108,1,255,1,143,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,14,1,4,1,200,1,2,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,1,0,1,4,1,0,1,248,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,8,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,4,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,4,1,2,1,0,1,20,1,17,1,0,1,8,1,0,1,195,1,190,1,27,1,176,1,4,1,0,1,1,1,168,1,36,1,7,1,8,1,0,1,195,1,190,1,0,1,144,1,4,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,8,1,8,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,2,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,5,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,7,1,5,1,20,1,17,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,4,1,1,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,1,1,1,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,3,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,177,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,3,1,196,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,248,1,0,1,0,1,1,1,204,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,140,1,0,1,81,1,0,1,3,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,32,1,80,1,6,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,27,131,0,0,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,31,1,0,1,0,1,16,1,19,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,25,1,0,1,0,1,16,1,18,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,96,1,23,1,48,1,29,1,18,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,1,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,4,1,0,1,200,1,2,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,6,1,0,1,200,1,8,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,7,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,2,1,2,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,2,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,192,1,0,1,160,1,2,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {128,51,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,86,191,153,252,254,107,227,239,95,195,252,243,107,252,26,191,9,253,255,215,113,127,254,255,250,249,245,232,255,191,255,101,243,251,79,127,13,71,135,111,235,192,127,173,95,227,246,116,96,56,171,16,206,255,244,155,200,119,255,214,175,113,123,56,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,121,126,253,95,131,227,189,9,2,53,19,167,253,222,191,169,124,247,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,159,209,126,130,54,20,51,54,59,174,205,95,52,212,102,247,215,248,131,128,215,111,166,237,252,7,113,42,94,235,126,46,227,248,91,238,97,156,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,8,108,127,221,129,247,17,243,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,254,53,126,15,188,243,107,106,27,124,142,119,83,239,221,223,136,190,220,242,38,224,13,253,190,242,254,254,63,40,166,254,237,60,26,205,232,247,119,222,223,127,20,253,254,231,249,223,255,102,242,19,52,248,247,244,115,208,235,79,209,239,255,38,250,236,175,163,255,255,169,250,247,63,69,191,255,99,244,255,223,74,223,243,219,254,87,244,249,127,230,181,5,81,254,15,250,251,77,164,237,22,125,246,187,253,102,174,237,239,73,191,63,214,118,191,158,252,224,246,255,55,61,102,120,143,241,193,175,253,127,255,223,255,215,255,253,123,252,26,39,111,142,159,252,78,244,231,63,249,107,200,103,192,255,119,226,86,191,70,250,15,209,63,191,183,190,255,107,209,127,127,0,253,92,209,255,255,164,95,195,240,244,175,245,107,252,89,10,243,175,226,207,126,77,250,239,215,251,53,254,38,253,76,242,20,127,237,95,251,107,242,55,191,14,195,185,205,163,188,250,215,254,58,196,173,191,38,255,231,125,190,219,255,156,62,190,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,225,134,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,255,215,248,93,104,88,196,115,127,16,113,200,159,132,223,147,95,3,188,255,155,254,73,242,249,175,249,7,253,90,250,251,175,129,33,255,6,191,233,95,100,126,255,53,233,247,39,76,130,223,148,218,252,103,244,221,127,246,23,17,156,95,251,215,252,53,126,125,130,245,159,241,255,127,93,254,254,215,39,120,252,247,159,68,184,254,90,191,230,175,241,91,82,251,255,225,79,250,117,245,93,180,251,53,127,141,175,180,173,249,251,63,251,147,126,29,102,87,134,245,23,253,154,140,31,62,167,190,127,131,223,128,126,255,191,255,160,39,220,151,244,253,107,82,223,166,253,175,41,239,255,69,104,255,155,114,127,191,38,181,255,53,244,247,95,139,126,255,74,127,255,117,232,247,191,166,131,227,255,253,23,253,38,220,135,188,35,191,203,59,242,187,188,243,127,255,223,66,115,195,83,191,134,62,45,4,236,215,254,191,136,167,90,203,83,127,238,175,41,159,161,173,225,169,63,141,62,123,170,239,255,38,191,198,71,191,198,115,250,249,251,210,255,31,243,0,127,19,150,211,167,191,166,200,163,228,203,28,255,104,154,235,255,247,143,234,115,59,238,174,222,251,186,207,229,215,148,147,159,96,213,252,155,254,69,196,22,191,135,15,79,229,225,15,250,53,84,78,126,237,64,126,126,13,79,126,126,163,63,232,215,182,191,255,198,127,208,175,99,127,255,77,136,7,205,239,191,233,31,244,235,57,121,3,204,255,200,192,33,185,226,223,19,129,169,159,255,154,128,169,191,255,90,128,169,191,255,218,128,169,191,255,58,4,243,215,255,143,152,181,68,190,88,246,126,77,254,253,43,122,71,100,77,254,254,53,8,30,228,244,63,251,131,220,103,144,17,247,153,192,248,191,9,166,124,246,99,44,63,191,230,127,4,121,251,77,72,238,228,239,95,235,63,18,249,51,127,255,58,252,247,111,102,255,254,13,248,239,223,92,100,251,215,130,206,248,53,21,175,95,139,127,247,241,250,13,33,247,132,215,95,246,39,253,90,191,198,95,166,120,161,141,193,235,151,255,65,191,27,193,248,181,84,134,127,77,254,253,55,192,88,184,47,146,255,255,136,116,196,31,244,27,104,223,164,3,248,239,31,179,127,255,58,252,119,162,184,128,86,191,150,133,243,235,255,71,128,163,48,255,163,223,248,215,248,107,248,247,95,251,215,248,181,209,134,240,49,116,252,207,254,224,223,80,223,199,28,252,26,220,31,211,133,113,250,141,244,59,204,9,254,254,181,244,59,208,251,55,86,248,170,167,88,143,253,218,76,31,124,247,213,95,140,177,255,186,65,251,175,20,135,95,135,219,24,237,3,53,227,219,183,111,179,193,138,216,183,95,235,255,179,246,109,239,235,200,173,147,165,95,255,111,234,202,42,126,167,249,51,159,15,218,55,154,179,191,9,246,205,216,28,252,13,155,99,248,181,107,239,126,45,249,251,111,18,190,249,205,193,171,250,251,111,65,191,255,223,127,147,111,235,126,173,142,237,251,53,148,239,21,238,95,244,107,169,237,115,124,47,246,13,125,252,166,12,19,60,246,107,232,239,191,214,31,4,217,145,223,127,157,63,72,100,68,108,178,224,164,246,77,223,145,223,229,29,249,93,222,1,174,68,11,238,183,203,95,58,29,191,198,223,245,91,208,63,191,22,108,221,63,246,107,27,254,250,119,127,19,249,12,4,52,252,245,175,253,38,190,173,251,181,122,182,238,223,250,53,126,100,235,52,70,178,227,254,183,110,124,227,71,207,143,158,31,61,255,111,121,126,132,199,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,255,63,158,203,175,153,115,248,9,202,21,254,23,156,43,252,61,127,79,63,95,216,205,63,12,229,10,17,155,155,92,33,226,127,228,10,77,142,0,121,177,255,130,242,68,99,134,245,155,254,77,154,119,224,188,220,175,253,107,124,245,39,253,38,41,114,223,95,253,77,191,142,228,43,255,32,249,251,215,248,155,126,109,78,233,112,30,193,251,252,175,161,207,255,154,200,231,255,55,125,254,127,243,231,63,38,57,180,63,8,121,137,78,94,235,79,50,125,255,90,218,247,111,234,245,141,207,126,83,175,239,95,75,251,112,159,75,223,253,207,165,239,95,203,246,253,107,113,223,191,150,237,251,215,226,190,127,173,78,223,191,89,167,239,223,108,160,239,223,108,160,239,223,44,218,247,175,211,233,251,215,177,125,75,206,238,55,160,239,255,239,63,233,199,132,38,255,144,174,115,152,28,232,63,100,114,53,242,247,175,195,127,255,90,46,7,202,127,83,190,245,47,2,108,228,113,100,30,204,223,60,110,228,56,245,111,198,5,121,215,191,232,119,227,185,151,156,14,167,81,8,143,255,130,242,130,138,199,127,36,243,20,230,98,77,190,211,228,98,77,190,243,215,225,28,167,129,243,235,255,75,255,133,230,23,9,230,191,100,242,157,191,166,230,59,21,62,231,160,126,29,7,159,255,254,117,29,124,254,251,215,179,127,255,6,252,247,175,47,185,172,94,190,20,185,236,161,124,41,114,219,67,249,82,244,11,92,37,47,230,242,165,191,134,205,167,153,246,50,158,95,147,199,237,242,165,120,126,148,47,253,81,190,244,103,43,95,138,199,207,151,254,222,96,14,206,151,254,62,150,191,238,254,154,242,25,126,24,254,218,162,63,118,126,13,6,206,249,210,3,250,249,237,95,227,231,111,110,244,67,108,240,111,194,54,248,253,215,235,84,207,253,67,106,243,172,62,199,223,190,62,87,219,96,245,57,254,54,250,220,216,72,163,207,133,111,176,198,101,254,22,91,98,244,185,89,55,23,93,245,27,128,191,172,62,7,15,251,250,28,127,251,250,28,127,251,250,252,215,84,56,208,231,128,35,191,15,235,243,95,67,241,84,248,252,183,175,207,127,13,197,83,199,201,127,127,211,250,28,62,6,112,237,234,115,200,221,77,250,252,255,9,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs0.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs0.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs0.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs1' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 55 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs1 : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex
	{
		/// <summary>Construct an instance of the 'vs1' shader</summary>
		public vs1()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs1.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs1.cid0 = state.GetNameUniqueID("v_SH");
			vs1.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs1.cid2 = state.GetNameUniqueID("v_lights");
			vs1.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs1.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs1.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs1.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs1.tid0 = state.GetNameUniqueID("CustomTexture");
			vs1.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs1.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[15], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[14], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs1.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs1.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs1.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs1.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs1.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs1.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs1.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs1.fx, vs1.fxb, 53, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1.vin[i]));
			index = vs1.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[11] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[12] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[16] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 8)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[17];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,156,135,0,1,3,131,0,5,1,0,0,1,48,135,0,1,17,131,0,1,4,131,0,1,1,229,0,0,229,0,0,201,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,60,1,0,1,0,1,1,1,88,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,16,1,144,135,0,0,1,3,1,0,1,0,1,16,1,12,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,224,1,0,1,0,1,15,1,220,131,0,0,1,93,134,0,0,1,15,1,248,1,0,1,0,1,15,1,244,1,0,1,0,1,16,1,64,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,20,1,0,1,0,1,16,1,16,131,0,0,1,93,134,0,0,1,16,1,44,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,128,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,84,1,0,1,0,1,16,1,80,131,0,0,1,93,134,0,0,1,16,1,108,1,0,1,0,1,16,1,104,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,5,1,100,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,156,1,0,1,0,1,2,1,200,135,0,0,1,36,1,0,1,0,1,2,131,0,0,1,2,1,40,138,0,0,1,1,1,216,131,0,0,1,28,1,0,1,0,1,1,1,203,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,196,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,4,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,136,1,0,1,81,1,0,1,6,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,12,1,0,1,9,1,0,1,13,1,0,1,10,1,0,1,14,1,0,1,11,1,0,1,47,1,0,1,12,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,16,1,12,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,13,1,194,1,0,1,18,133,0,0,1,32,1,19,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,32,1,51,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,6,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,6,1,4,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,6,1,5,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,6,1,2,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,18,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,19,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,0,1,177,1,180,1,0,1,225,1,1,1,4,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,5,1,4,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,3,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,12,1,252,1,108,1,160,1,3,1,14,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,14,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,149,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,19,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,212,1,0,1,0,1,3,1,244,135,0,0,1,36,1,0,1,0,1,15,1,64,1,0,1,0,1,15,1,104,138,0,0,1,15,1,24,131,0,0,1,28,1,0,1,0,1,15,1,11,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,4,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,216,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,180,1,0,1,81,1,0,1,8,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,16,1,11,1,0,1,32,1,32,1,12,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,55,1,0,1,0,1,16,1,50,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,8,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,16,1,37,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,96,1,62,1,96,1,68,1,18,1,0,1,18,133,0,0,1,64,1,74,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,8,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,8,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,6,1,17,1,0,1,200,1,15,1,0,1,5,1,160,1,27,1,136,1,0,1,161,1,6,1,18,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,6,1,19,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,19,1,4,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,6,1,17,1,2,1,92,1,2,1,0,1,8,1,0,131,27,0,1,161,1,1,1,0,1,8,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,6,1,17,1,2,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,19,1,4,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,6,1,19,1,4,1,200,1,15,1,0,1,5,1,160,1,108,1,255,1,143,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,17,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,248,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,2,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,2,1,2,1,0,1,20,1,17,1,0,1,8,1,0,1,190,1,190,1,27,1,176,1,2,1,0,1,1,1,168,1,36,1,7,1,8,1,0,1,190,1,190,1,0,1,144,1,2,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,8,1,8,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,5,1,3,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,4,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,7,1,5,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,5,1,4,1,1,1,168,1,66,1,4,1,2,1,0,1,190,1,190,1,0,1,144,1,5,1,5,1,6,1,20,1,20,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,5,1,6,1,1,1,168,1,136,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,7,1,200,1,15,1,0,1,1,1,0,1,167,1,167,1,0,1,224,1,3,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,1,1,14,1,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,1,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,150,1,252,1,27,1,160,1,1,1,14,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,150,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,4,1,172,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,32,1,0,1,0,1,2,1,140,135,0,0,1,36,1,0,1,0,1,1,1,148,1,0,1,0,1,1,1,188,138,0,0,1,1,1,108,131,0,0,1,28,1,0,1,0,1,1,1,95,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,17,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,76,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,32,1,80,1,7,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,47,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,19,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,8,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,3,1,0,1,200,1,1,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,6,1,0,1,200,1,8,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,7,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,132,0,0,1,226,1,1,1,1,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,1,1,14,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,1,1,8,1,8,1,200,1,14,1,0,1,1,1,4,1,252,1,252,1,0,1,160,1,1,1,14,1,0,1,200,1,1,1,0,1,2,1,0,1,195,1,195,1,0,1,240,1,1,1,1,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,88,1,130,1,0,1,2,1,0,1,190,1,190,1,27,1,240,1,4,1,4,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,1,1,0,1,1,1,0,1,177,1,27,1,108,1,139,1,2,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,177,1,160,1,0,1,16,1,130,1,168,1,135,1,0,1,3,1,0,1,192,1,27,1,128,1,193,1,3,1,0,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,141,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {208,55,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,162,223,76,126,255,181,241,55,253,127,231,215,148,191,127,115,250,255,175,163,159,253,232,9,159,95,143,254,255,251,95,54,191,255,244,215,112,116,123,167,132,250,181,126,141,219,211,141,225,172,66,56,233,111,42,223,253,91,191,198,237,225,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,230,249,245,127,13,142,247,38,8,212,76,156,246,71,105,156,246,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,191,78,251,9,218,80,204,216,236,184,54,255,210,80,155,221,95,227,12,120,253,102,218,206,127,16,167,226,181,238,231,58,142,95,7,227,252,205,34,223,227,239,216,123,63,70,255,127,82,230,203,89,177,188,0,145,126,221,129,247,17,243,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,254,53,254,32,188,243,107,106,27,124,142,119,83,239,221,199,244,229,239,237,77,192,31,70,191,255,69,222,223,35,234,240,219,30,141,254,52,250,253,175,242,254,254,187,232,247,127,206,255,254,55,147,159,160,193,111,164,191,131,94,127,138,126,255,31,81,219,127,143,254,255,167,234,223,255,27,253,254,203,233,255,79,35,109,127,59,250,236,183,250,205,92,219,29,250,125,68,255,255,195,34,109,127,111,250,236,141,215,118,69,191,151,218,238,215,147,31,220,254,255,166,199,12,239,49,62,248,181,255,239,255,251,255,250,191,127,143,95,227,228,205,241,147,223,137,254,252,39,127,13,249,12,248,255,78,220,234,215,72,255,33,250,231,247,214,247,127,45,250,239,15,160,159,43,250,255,159,244,107,24,158,254,181,126,141,63,75,97,254,85,252,217,175,73,255,253,122,191,198,223,164,159,73,158,226,175,253,107,127,77,254,230,215,97,56,183,121,148,87,255,218,95,135,184,245,215,228,255,188,207,119,251,159,211,199,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,220,144,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,191,11,13,139,120,238,15,34,14,249,147,240,123,66,191,255,154,191,198,111,250,39,201,231,191,230,31,244,107,233,239,191,6,134,252,27,252,166,127,145,249,253,215,164,223,159,48,9,126,83,106,243,159,209,119,255,217,95,68,112,126,237,95,243,215,248,245,9,214,127,198,255,255,117,249,251,95,159,224,241,223,127,18,225,250,107,253,154,191,198,111,73,237,255,135,63,233,215,213,119,209,238,215,252,53,190,210,182,230,239,255,236,79,250,117,152,93,25,22,88,82,63,167,190,127,131,223,128,126,255,191,255,160,39,220,151,244,253,107,82,223,166,253,175,41,239,255,69,104,255,155,114,127,191,38,181,255,53,244,247,95,139,126,255,74,127,255,117,232,247,191,166,131,227,255,253,23,253,38,220,135,188,35,191,203,59,242,187,188,243,127,255,223,66,115,195,83,191,134,62,127,27,132,247,215,254,191,136,167,254,32,203,83,255,236,175,41,159,161,173,225,169,127,140,62,123,170,239,255,230,191,198,71,191,198,115,250,249,251,210,255,75,30,224,111,206,114,218,254,154,34,143,146,47,115,252,243,155,155,206,126,244,4,143,234,127,75,167,174,158,252,186,207,229,215,148,171,159,96,85,254,155,254,69,196,70,191,135,15,79,229,231,15,250,53,84,174,126,237,64,222,126,13,79,222,126,163,63,232,215,182,191,255,198,127,208,175,99,127,255,77,136,103,205,239,191,41,233,120,43,159,128,249,31,25,56,36,135,252,123,34,48,245,243,95,19,48,245,247,95,11,48,245,247,95,27,48,245,247,95,135,96,254,250,255,17,179,162,200,35,203,234,175,201,191,127,69,239,136,108,202,223,191,6,193,131,92,255,103,127,144,251,12,50,229,62,19,24,255,55,193,148,207,126,140,229,237,215,252,143,32,159,191,57,201,169,252,253,107,241,223,191,133,253,251,215,225,191,127,75,251,247,111,192,127,255,86,191,134,200,185,209,49,191,193,175,241,127,255,197,191,1,125,246,27,48,126,191,129,145,125,214,19,191,150,200,61,183,39,189,253,7,37,36,219,191,38,225,65,131,250,131,126,125,150,127,180,255,191,255,32,25,155,209,27,192,83,190,251,181,104,172,212,246,215,254,181,133,6,127,240,111,34,122,232,215,2,205,164,111,30,7,198,207,255,255,245,153,94,162,55,140,46,194,231,191,6,207,197,127,246,7,253,110,252,174,224,45,180,229,62,153,182,191,22,205,169,208,246,79,82,189,247,27,42,109,255,178,63,233,215,250,53,254,107,11,207,208,150,172,38,195,251,117,45,29,128,203,111,142,185,193,247,127,80,74,127,255,58,172,235,126,13,162,247,255,205,244,33,205,193,120,252,186,252,127,180,255,181,121,188,191,142,253,251,55,230,246,201,175,241,167,89,93,250,99,172,71,191,162,207,255,55,198,249,215,37,186,128,166,152,19,232,85,192,250,13,117,142,160,91,241,247,111,100,255,254,117,248,239,223,88,233,6,158,194,223,191,22,127,247,235,255,71,66,7,51,87,248,155,93,15,250,253,55,248,143,126,179,95,227,175,225,223,127,237,95,227,215,254,143,160,223,125,90,255,166,10,15,252,250,107,43,60,67,247,223,76,231,251,215,102,126,193,223,95,253,197,152,239,95,55,104,243,149,194,254,117,184,141,209,222,244,89,224,31,124,27,18,245,107,69,252,131,95,235,255,179,254,193,222,215,209,99,78,183,252,250,127,83,87,119,225,119,146,121,243,249,160,127,64,243,252,55,193,63,120,194,115,47,127,195,102,11,239,11,15,251,254,194,175,37,127,255,77,194,15,224,219,191,70,127,255,45,192,179,127,147,239,43,252,90,29,223,225,215,80,253,164,112,255,162,95,139,241,53,250,201,249,7,232,227,55,85,61,241,107,170,127,0,61,241,107,170,127,240,107,17,255,254,154,234,31,252,154,22,39,245,15,244,29,249,93,222,145,223,229,29,150,239,223,64,240,233,242,151,78,199,175,177,245,91,209,63,191,22,124,133,127,233,215,54,252,245,27,254,166,242,25,8,104,248,235,215,249,77,125,95,225,215,234,249,10,255,214,175,241,35,95,225,125,31,141,73,45,157,254,173,27,223,248,209,243,243,233,249,209,88,127,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,217,127,46,191,102,142,226,39,40,215,250,95,115,174,245,247,252,61,253,124,107,55,95,49,148,107,69,44,111,114,173,200,23,32,215,106,114,10,200,119,254,215,148,87,26,51,172,223,244,111,210,60,197,175,131,239,126,237,95,227,171,63,233,55,79,57,71,246,55,253,58,146,239,253,131,228,239,95,227,111,250,181,57,5,196,121,7,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,255,152,230,214,126,13,206,243,185,60,227,175,169,127,255,186,156,219,144,190,127,11,175,111,124,246,91,120,125,255,90,218,135,251,92,250,238,127,46,125,255,90,182,111,228,13,255,51,254,91,250,254,181,184,239,95,171,211,247,111,217,233,251,183,28,232,251,183,28,232,251,183,140,246,253,235,116,250,254,117,108,223,191,38,207,211,111,64,223,255,223,127,210,143,9,77,254,33,93,87,50,57,100,254,251,215,180,127,255,58,252,247,175,229,114,200,252,247,175,173,127,83,130,134,115,65,191,190,253,155,105,140,249,214,191,121,220,200,97,234,223,140,11,242,216,200,41,153,181,39,155,23,70,142,93,199,199,185,39,25,131,228,167,127,55,230,61,201,61,201,184,126,3,254,254,215,226,254,57,231,137,113,241,24,145,183,253,175,41,71,249,235,48,143,253,6,156,183,254,53,56,79,251,21,231,166,127,13,109,139,239,127,109,237,231,215,162,191,127,109,198,85,242,105,230,51,244,139,28,241,175,173,253,254,218,194,87,60,70,249,155,231,154,199,40,127,51,253,121,140,120,247,215,243,222,5,15,254,186,242,29,229,124,229,111,154,111,194,245,175,249,139,146,224,239,175,254,162,212,194,118,249,103,124,255,107,109,120,255,215,246,222,55,249,233,95,195,27,215,109,242,211,191,30,209,6,239,155,249,148,190,220,124,226,111,147,159,198,124,226,111,147,159,166,220,252,127,132,191,127,45,238,235,215,255,143,36,183,104,115,245,255,210,127,173,121,99,162,255,191,100,242,211,191,102,39,63,141,249,53,249,105,172,179,252,154,22,158,140,237,55,211,252,244,175,233,229,167,127,29,155,191,52,109,190,82,216,191,14,183,113,25,195,31,229,167,127,148,159,254,217,203,79,227,241,243,211,255,20,33,36,249,233,220,242,215,239,255,107,202,103,248,97,248,235,247,166,63,118,126,13,6,206,249,233,3,250,249,237,95,227,71,185,232,219,62,31,226,243,252,230,236,243,188,255,250,242,143,49,63,254,154,255,144,250,24,214,126,226,111,223,126,170,45,182,246,19,127,27,251,41,118,232,63,251,147,140,253,20,253,5,222,182,240,248,111,99,63,127,13,177,45,127,146,111,63,127,141,142,253,52,114,32,107,157,161,253,252,181,84,54,126,3,215,55,255,191,107,63,97,71,126,115,213,179,190,253,4,29,186,246,211,200,54,108,165,250,55,191,182,233,219,216,207,95,71,101,11,253,170,143,240,39,25,251,169,62,194,159,100,236,167,250,8,60,70,99,123,253,119,205,250,236,111,168,127,67,246,127,115,210,247,73,240,247,175,241,23,165,191,134,172,223,226,111,223,126,170,173,14,236,167,121,255,215,177,127,255,26,129,253,124,223,245,93,188,255,99,138,143,191,190,139,177,250,235,187,24,171,191,190,11,251,105,214,119,99,246,19,112,229,247,111,214,126,98,94,111,178,159,255,79,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs1.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs1.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs1.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs3' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 69 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs3 : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex
	{
		/// <summary>Construct an instance of the 'vs3' shader</summary>
		public vs3()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs3.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs3.cid0 = state.GetNameUniqueID("v_SH");
			vs3.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs3.cid2 = state.GetNameUniqueID("v_lights");
			vs3.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs3.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs3.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs3.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs3.tid0 = state.GetNameUniqueID("CustomTexture");
			vs3.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs3.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[21], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[20], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[13], ref this.vreg[14], ref this.vreg[15], ref this.vreg[16], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[9], ref this.vreg[10], ref this.vreg[11], ref this.vreg[12], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs3.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs3.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs3.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs3.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs3.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs3.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs3.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs3.fx, vs3.fxb, 65, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3.vin[i]));
			index = vs3.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[17] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[18] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[19] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[22] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 9)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[23];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,252,135,0,1,3,131,0,5,1,0,0,1,144,135,0,1,23,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,196,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,216,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,128,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,232,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,12,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,48,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,156,1,0,1,0,1,1,1,184,138,0,0,1,1,1,228,1,0,1,0,1,2,139,0,0,1,15,1,140,1,0,1,0,1,15,1,168,138,0,0,1,15,1,244,1,0,1,0,1,16,1,8,138,0,0,1,16,1,24,1,0,1,0,1,16,1,44,138,0,0,1,16,1,240,135,0,0,1,3,1,0,1,0,1,16,1,108,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,64,1,0,1,0,1,16,1,60,131,0,0,1,93,134,0,0,1,16,1,88,1,0,1,0,1,16,1,84,1,0,1,0,1,16,1,160,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,116,1,0,1,0,1,16,1,112,131,0,0,1,93,134,0,0,1,16,1,140,1,0,1,0,1,16,1,136,1,0,1,0,1,16,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,180,1,0,1,0,1,16,1,176,131,0,0,1,93,134,0,0,1,16,1,204,1,0,1,0,1,16,1,200,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,7,1,80,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,252,1,0,1,0,1,4,1,84,135,0,0,1,36,1,0,1,0,1,2,1,96,1,0,1,0,1,2,1,136,138,0,0,1,2,1,56,131,0,0,1,28,1,0,1,0,1,2,1,43,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,2,1,36,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,4,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,4,1,20,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,9,1,0,1,0,1,48,1,10,1,0,1,0,1,80,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,85,1,0,1,0,1,16,1,58,1,0,1,0,1,16,1,33,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,34,1,0,1,0,1,16,1,32,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,9,1,16,1,15,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,96,1,54,1,18,1,0,1,18,133,0,0,1,96,1,60,1,96,1,66,1,18,1,0,1,18,133,0,0,1,96,1,72,1,96,1,78,1,18,1,0,1,18,133,0,0,1,32,1,84,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,2,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,3,1,4,1,200,1,15,1,0,1,5,1,0,1,108,1,248,1,148,1,235,1,5,1,1,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,23,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,24,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,25,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,26,1,0,1,200,1,7,1,0,1,2,1,0,1,198,1,180,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,3,1,2,1,200,1,14,131,0,0,1,27,1,252,1,140,1,235,1,0,1,1,1,0,1,200,1,1,131,0,0,1,195,1,195,1,0,1,240,131,0,0,1,200,1,7,1,0,1,1,1,4,1,103,1,27,1,98,1,139,1,5,1,3,1,3,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,5,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,20,1,27,1,192,1,139,1,5,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,20,1,192,1,108,1,160,1,5,1,20,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,5,1,5,1,0,1,200,1,7,1,128,1,4,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,5,1,20,1,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,190,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,190,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,190,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,190,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,190,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,62,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,62,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,62,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,21,1,168,1,16,1,42,1,17,1,1,1,0,1,0,1,16,1,52,1,0,1,0,1,5,1,116,135,0,0,1,36,1,0,1,0,1,15,1,160,1,0,1,0,1,15,1,200,138,0,0,1,15,1,120,131,0,0,1,28,1,0,1,0,1,15,1,107,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,100,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,216,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,5,1,52,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,10,1,0,1,0,1,48,1,11,1,0,1,0,1,80,1,12,1,0,1,0,1,16,1,13,1,0,1,48,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,109,1,0,1,0,1,16,1,82,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,59,1,0,1,0,1,16,1,52,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,10,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,16,1,39,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,96,1,82,1,18,1,0,1,18,133,0,0,1,96,1,88,1,96,1,94,1,18,1,0,1,18,133,0,0,1,96,1,100,1,64,1,106,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,148,1,177,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,6,1,0,1,27,1,27,1,198,1,161,1,1,1,12,1,7,1,200,1,15,1,0,1,0,1,160,1,27,1,136,1,0,1,161,1,5,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,5,1,24,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,5,1,25,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,5,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,171,1,5,1,23,1,0,1,92,1,2,1,0,1,7,1,0,131,27,0,1,161,1,1,1,9,1,7,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,148,1,171,1,5,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,5,1,25,1,4,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,108,1,161,1,1,1,10,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,5,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,108,1,255,1,143,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,5,1,23,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,4,131,0,0,1,248,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,6,1,0,1,195,1,190,1,0,1,176,1,0,1,11,1,0,1,200,1,4,1,0,1,6,1,0,1,195,1,190,1,0,1,176,1,0,1,12,1,0,1,20,1,17,1,0,1,7,1,0,1,195,1,190,1,27,1,176,1,0,1,9,1,1,1,168,1,36,1,6,1,7,1,0,1,195,1,190,1,0,1,144,1,0,1,10,1,11,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,7,1,7,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,6,1,6,1,0,1,200,1,1,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,5,1,2,1,0,1,200,1,2,1,0,1,3,1,0,1,195,1,190,1,0,1,240,1,3,1,2,1,0,1,200,1,4,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,4,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,13,1,1,1,168,1,18,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,14,1,13,1,20,1,20,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,15,1,1,1,168,1,40,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,16,1,14,1,20,1,18,131,0,0,1,190,1,190,1,27,1,176,1,3,1,13,1,1,1,168,1,68,1,4,1,0,1,0,1,190,1,190,1,0,1,144,1,3,1,15,1,15,1,20,1,24,131,0,0,1,190,1,190,1,27,1,176,1,3,1,14,1,1,1,168,1,136,1,4,1,1,1,0,1,18,1,18,1,0,1,208,1,0,1,0,1,16,1,200,1,15,1,0,1,3,1,0,1,167,1,167,1,0,1,224,1,2,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,132,0,0,1,224,1,2,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,1,1,4,1,201,1,27,1,98,1,139,131,3,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,186,1,27,1,192,1,139,1,3,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,186,1,192,1,27,1,160,1,3,1,20,1,129,1,200,1,7,1,128,1,4,1,0,1,201,1,108,1,0,1,225,131,0,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,6,1,152,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,128,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,1,1,244,1,0,1,0,1,2,1,28,138,0,0,1,1,1,204,131,0,0,1,28,1,0,1,0,1,1,1,191,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,184,131,0,0,1,48,1,0,1,2,131,0,0,1,23,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,32,1,80,1,10,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,23,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,22,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,8,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,96,1,75,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,9,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,10,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,11,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,12,1,0,1,200,1,1,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,13,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,15,1,0,1,200,1,4,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,14,1,0,1,200,1,1,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,13,1,0,1,200,1,2,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,14,1,0,1,200,1,4,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,15,1,0,1,200,1,8,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,16,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,132,0,0,1,226,1,3,1,3,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,192,1,27,1,192,1,139,1,3,1,0,1,0,1,200,1,1,131,0,0,1,205,1,205,1,0,1,240,1,5,1,5,1,0,1,200,1,14,1,0,1,1,1,4,1,118,1,27,1,118,1,139,131,3,0,1,200,1,7,1,0,1,3,1,4,1,192,1,192,1,0,1,160,1,3,1,20,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,88,1,17,1,0,1,1,1,0,1,201,1,201,1,108,1,240,1,1,1,1,1,128,1,172,1,36,1,9,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,5,1,168,1,24,1,9,1,2,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,200,1,7,1,128,1,4,1,0,1,180,1,108,1,0,1,225,1,5,1,0,1,0,1,88,1,132,1,2,1,9,1,0,131,27,0,1,161,1,2,1,8,1,130,1,176,1,23,1,0,1,7,1,0,1,192,1,108,1,65,1,193,1,5,1,0,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,108,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,5,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,166,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {36,59,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,141,223,92,126,255,181,241,55,253,255,79,250,53,229,239,223,150,254,255,235,232,103,63,122,126,184,207,175,71,255,255,253,47,155,223,127,250,107,184,121,249,183,116,34,126,173,95,227,246,243,194,112,86,33,156,63,232,55,149,239,254,173,95,227,246,112,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,252,250,191,6,199,123,19,4,106,38,78,251,175,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,111,244,155,69,218,80,204,216,236,184,54,59,67,109,118,127,141,63,8,120,225,235,95,71,190,178,15,226,84,12,161,251,185,140,227,143,191,135,113,254,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,128,72,191,238,192,251,136,121,99,239,255,134,244,255,179,101,211,102,203,41,32,240,24,94,207,179,89,94,255,26,127,16,222,249,53,181,13,62,199,187,169,247,238,159,71,95,254,93,222,4,252,103,248,253,215,178,127,254,26,127,28,117,248,87,233,124,225,249,229,244,251,111,240,155,185,191,127,59,250,125,228,253,253,203,245,119,208,160,212,223,1,238,79,209,239,127,79,250,236,49,253,255,79,213,191,127,111,250,253,13,253,255,47,139,180,125,71,159,181,94,219,63,137,126,255,227,232,255,255,89,164,237,223,69,159,253,109,94,219,127,137,126,255,231,180,221,175,39,63,184,253,255,77,143,25,238,99,124,240,107,255,223,255,247,255,245,127,255,30,191,198,201,155,227,39,191,19,253,249,79,254,26,242,25,240,255,157,184,213,175,145,254,67,244,207,239,173,239,255,90,244,223,31,64,63,87,244,255,63,233,215,48,60,253,107,253,26,127,150,194,252,171,248,179,95,147,254,251,245,126,141,191,73,63,147,60,197,95,251,215,254,154,252,205,175,227,147,119,227,163,188,250,215,254,58,196,173,191,38,255,231,125,190,219,255,156,62,190,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,225,134,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,255,215,248,93,104,88,196,115,127,16,113,200,159,132,223,147,95,3,188,255,155,254,73,242,249,175,249,7,253,90,250,251,175,129,33,255,6,191,233,95,100,126,255,53,233,247,39,76,130,223,148,218,252,103,244,221,127,246,23,17,156,95,251,215,252,53,126,125,130,245,159,241,255,127,93,254,254,215,39,120,252,55,82,112,191,214,175,249,107,252,150,212,254,127,248,147,126,93,125,23,237,126,205,95,227,43,109,107,254,254,207,254,164,95,135,217,149,97,253,69,191,38,227,135,207,169,239,223,224,55,160,223,255,239,63,232,9,247,37,125,255,154,212,183,105,255,107,202,251,127,17,218,255,166,220,223,175,73,237,127,13,253,253,215,162,223,191,210,223,127,29,250,253,175,233,224,248,127,255,69,191,9,247,33,239,200,239,242,142,252,46,239,252,223,255,183,208,220,240,212,175,161,207,223,5,102,251,181,255,47,226,169,63,203,242,212,39,191,150,124,134,31,134,167,126,55,250,227,169,190,255,219,210,191,207,233,231,239,75,255,255,231,120,128,191,45,203,233,191,246,107,138,60,74,190,204,241,207,111,203,32,126,244,252,176,31,181,47,118,30,186,122,248,235,62,151,95,83,110,127,130,76,197,239,248,107,252,166,127,17,177,233,239,65,154,245,247,52,240,118,216,132,252,166,255,211,175,109,62,208,71,229,246,15,250,53,84,158,127,237,64,206,127,13,79,206,127,163,63,232,215,182,191,255,198,127,208,175,99,127,255,77,72,86,204,239,191,41,217,22,171,23,0,243,63,50,112,72,254,249,247,68,96,234,231,191,38,96,234,239,191,22,96,234,239,191,54,96,234,239,191,14,193,252,245,255,35,22,1,145,71,214,17,162,79,190,162,119,140,78,248,13,255,32,244,249,107,255,26,127,25,233,147,191,236,15,114,122,2,178,76,122,232,215,248,229,127,208,239,198,242,45,122,72,224,177,94,97,120,191,22,255,238,224,201,223,128,247,159,253,73,164,75,254,32,247,153,192,51,159,9,140,255,155,112,148,207,126,140,245,198,175,249,31,161,143,223,150,244,141,252,253,107,241,223,191,157,253,251,215,225,191,127,123,251,247,111,192,127,255,14,244,247,175,101,113,249,207,254,224,223,138,254,254,13,232,239,95,155,245,237,127,198,255,255,245,121,142,64,55,246,69,104,60,191,193,31,244,59,254,26,191,6,195,249,181,137,134,208,87,191,185,194,253,181,137,118,248,251,183,208,191,209,22,127,255,150,162,59,127,173,95,135,232,252,107,255,26,255,245,31,36,191,163,237,255,205,191,255,218,12,243,175,249,139,126,33,187,9,255,217,255,4,250,252,58,244,217,175,77,223,255,142,191,198,87,127,209,152,105,247,107,254,77,191,14,253,77,4,248,245,126,93,163,219,211,255,251,47,38,154,253,77,191,70,10,61,251,107,252,77,191,129,190,247,235,178,206,23,220,127,93,250,27,239,1,38,222,147,239,24,206,175,67,243,204,99,196,216,240,57,230,235,215,167,207,136,182,127,208,111,192,237,127,115,254,252,215,212,191,127,61,250,251,215,215,191,127,77,110,251,107,50,45,8,214,175,139,126,127,173,244,255,102,60,208,31,245,253,7,165,212,7,248,236,215,3,237,244,187,95,143,199,238,227,244,107,115,31,250,55,181,255,141,241,147,96,253,105,10,235,215,248,117,129,247,175,169,99,252,117,217,70,253,111,127,16,230,237,215,161,207,127,29,29,43,254,6,29,133,102,191,198,95,244,241,175,193,196,4,255,253,71,191,142,226,143,249,192,120,127,107,157,119,153,159,255,251,15,250,109,168,253,175,203,239,255,154,250,247,87,60,95,191,22,189,11,88,242,251,111,240,31,253,54,52,71,50,95,191,246,127,196,246,142,199,98,105,240,235,80,255,255,145,190,255,23,255,58,202,47,196,19,255,145,225,29,200,155,145,5,200,219,175,165,191,139,188,253,103,214,158,209,103,129,143,244,109,72,247,175,21,241,145,126,173,255,207,250,72,123,95,71,215,58,61,247,235,255,77,158,206,179,250,143,244,168,249,124,208,71,34,58,255,77,240,145,158,240,252,203,223,240,91,68,39,169,92,253,26,206,103,250,181,228,239,191,73,120,224,55,167,246,127,141,254,254,91,128,87,254,38,223,95,250,181,58,254,211,175,97,117,27,195,5,207,241,231,248,12,122,209,248,72,232,227,55,101,152,224,191,95,67,127,135,110,249,74,127,135,174,16,31,233,215,180,56,169,143,164,239,200,239,242,142,252,46,239,0,87,162,5,247,219,229,47,157,142,95,35,253,173,233,159,95,11,254,210,127,245,107,27,254,122,251,155,202,103,32,160,225,175,217,111,186,217,95,250,183,126,141,31,249,75,255,111,123,52,238,183,243,240,111,221,248,198,237,159,31,181,252,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,155,159,203,175,153,3,249,9,202,135,253,143,191,6,242,205,191,231,239,41,57,103,121,118,62,48,223,140,28,130,201,55,35,79,129,124,179,201,101,32,71,251,63,82,142,75,242,144,191,233,223,164,249,17,206,197,254,218,191,198,87,127,210,111,207,185,185,175,56,87,135,207,126,123,205,213,253,218,156,122,226,124,135,247,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,127,140,243,28,191,206,31,132,252,137,233,235,215,210,190,126,91,175,47,124,246,219,122,125,105,142,216,251,92,250,234,127,46,125,153,252,177,172,77,73,62,249,215,229,60,158,244,245,219,121,125,225,179,223,206,235,235,215,86,152,238,115,233,171,255,185,244,245,107,219,190,126,45,238,11,127,75,126,242,55,160,191,255,239,63,9,223,33,47,138,156,208,111,102,243,208,156,95,230,182,242,247,175,201,127,255,90,246,111,206,55,51,141,126,3,158,171,95,231,15,66,219,223,84,223,71,110,8,127,255,198,246,239,95,139,255,254,77,232,239,223,141,231,89,242,93,146,155,252,245,255,35,147,143,164,132,209,31,244,63,82,14,244,199,20,6,62,71,14,91,112,100,28,24,166,252,45,57,240,223,68,255,70,31,104,111,114,226,192,9,127,155,156,184,228,189,5,71,201,217,50,127,253,193,200,189,163,111,172,79,0,71,224,135,188,175,161,211,175,199,184,254,211,146,207,98,252,194,124,57,112,198,186,128,227,211,95,243,111,250,181,52,95,142,156,54,114,192,177,124,57,222,67,78,91,254,47,185,120,125,239,215,249,13,232,61,124,254,107,115,110,90,112,250,49,250,236,55,80,122,35,183,254,99,191,134,172,19,252,134,250,247,175,203,56,252,53,127,81,18,252,45,249,228,223,128,104,131,223,133,23,169,31,205,137,163,191,223,128,242,118,41,247,249,107,241,59,126,190,156,219,106,190,252,215,247,112,18,30,16,252,13,14,38,7,110,112,248,13,152,7,4,7,121,255,215,102,252,21,222,175,243,235,83,190,253,215,239,228,219,209,135,201,183,255,250,132,215,175,255,107,252,111,127,16,230,10,115,128,181,1,233,15,115,107,104,254,149,205,183,83,206,244,63,66,27,225,163,223,148,115,239,202,71,255,208,175,201,191,91,62,225,191,19,199,39,252,247,111,104,255,254,13,248,239,223,72,249,130,224,254,75,134,142,244,221,191,100,114,241,191,166,230,226,127,3,233,131,249,197,228,247,241,55,161,197,249,125,121,207,210,159,242,175,191,193,127,36,223,125,245,23,99,29,234,215,13,218,127,165,176,127,29,110,227,50,165,63,202,203,255,40,47,255,179,151,151,199,227,231,229,255,33,2,44,121,249,95,98,249,235,31,252,53,229,51,252,48,252,245,119,209,31,59,191,6,3,231,188,252,1,253,252,246,175,241,163,28,252,255,91,158,15,241,245,126,91,246,245,224,231,253,158,191,167,129,183,243,1,190,222,111,160,122,14,126,131,239,23,224,239,223,196,254,45,126,5,108,52,108,158,191,134,15,63,193,172,255,194,119,249,109,117,45,92,97,90,63,1,50,243,107,104,31,242,247,175,197,127,27,63,1,178,243,107,104,31,106,15,248,125,223,111,192,223,198,111,16,251,254,159,253,73,240,141,160,219,225,55,252,90,3,126,3,214,133,141,223,32,107,229,206,111,248,109,127,141,208,111,80,255,139,62,119,235,236,88,195,133,223,96,214,199,99,126,3,222,131,157,19,123,40,126,131,190,247,235,152,53,244,95,155,255,22,156,140,47,129,119,225,231,253,6,140,159,216,108,179,30,14,220,146,224,111,177,91,88,103,199,239,176,205,188,134,173,190,1,250,163,190,255,160,148,251,252,181,248,29,223,111,48,235,219,24,167,177,221,190,223,240,235,121,56,24,191,193,224,128,62,127,109,197,65,222,255,181,25,127,133,247,235,252,122,228,55,252,122,29,191,1,125,24,191,225,215,35,125,247,235,253,26,255,219,31,132,185,194,28,192,127,66,127,248,219,248,13,128,253,241,175,225,252,134,95,151,225,139,223,96,124,115,248,13,152,119,223,111,192,223,190,223,128,191,125,191,1,127,251,126,131,161,227,215,245,27,16,31,40,253,3,191,129,190,187,209,111,248,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs3.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs3.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs3.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs0c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 32 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs0c : Xen.Graphics.ShaderSystem.BaseShader, IMS_Base, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs0c' shader</summary>
		public vs0c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs0c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs0c.cid0 = state.GetNameUniqueID("v_SH");
			vs0c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs0c.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			vs0c.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs0c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs0c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs0c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs0c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs0c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs0c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs0c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs0c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs0c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs0c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs0c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs0c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs0c.fx, vs0c.fxb, 35, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0c.vin[i]));
			index = vs0c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,108,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,72,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,240,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,88,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,124,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,160,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,84,1,0,1,0,1,1,1,112,138,0,0,1,14,1,252,1,0,1,0,1,15,1,24,138,0,0,1,15,1,100,1,0,1,0,1,15,1,120,138,0,0,1,15,1,136,1,0,1,0,1,15,1,156,138,0,0,1,16,1,96,135,0,0,1,3,1,0,1,0,1,15,1,220,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,176,1,0,1,0,1,15,1,172,131,0,0,1,93,134,0,0,1,15,1,200,1,0,1,0,1,15,1,196,1,0,1,0,1,16,1,16,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,228,1,0,1,0,1,15,1,224,131,0,0,1,93,134,0,0,1,15,1,252,1,0,1,0,1,15,1,248,1,0,1,0,1,16,1,80,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,36,1,0,1,0,1,16,1,32,131,0,0,1,93,134,0,0,1,16,1,60,1,0,1,0,1,16,1,56,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,4,1,152,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,120,1,0,1,0,1,2,1,32,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,224,1,0,1,81,1,0,1,7,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,12,1,0,1,9,1,0,1,13,1,0,1,10,1,0,1,14,1,0,1,11,1,0,1,47,1,0,1,12,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,33,131,0,0,1,34,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,32,1,11,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,13,1,194,1,0,1,18,133,0,0,1,32,1,19,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,7,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,7,1,3,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,7,1,6,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,7,1,2,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,3,1,0,1,177,1,180,1,0,1,225,1,1,1,3,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,6,1,3,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,18,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,176,1,0,1,0,1,3,1,64,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,0,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,7,1,0,1,0,1,48,1,8,1,0,1,0,1,160,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,16,1,11,1,0,1,32,1,32,1,12,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,57,131,0,0,1,58,1,0,1,0,1,16,1,59,1,0,1,0,1,16,1,62,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,50,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,7,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,16,1,37,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,16,1,62,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,9,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,7,1,14,1,0,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,7,1,15,1,0,1,92,1,15,1,0,1,6,1,160,1,27,1,136,1,177,1,161,1,7,1,16,1,9,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,171,1,7,1,16,1,6,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,7,1,14,1,4,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,0,1,9,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,7,1,14,1,4,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,6,1,160,1,177,1,52,1,148,1,171,1,7,1,16,1,6,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,9,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,7,1,16,1,6,1,200,1,15,1,0,1,2,1,160,1,108,1,255,1,143,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,7,1,14,1,4,1,200,1,2,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,4,1,0,1,4,1,0,1,248,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,8,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,1,1,0,1,8,1,0,1,195,1,190,1,0,1,176,1,4,1,2,1,0,1,200,1,4,1,0,1,8,1,0,1,195,1,190,1,0,1,176,1,4,1,3,1,0,1,20,1,17,1,0,1,9,1,0,1,195,1,190,1,27,1,176,1,4,1,0,1,1,1,168,1,36,1,8,1,9,1,0,1,195,1,190,1,0,1,144,1,4,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,8,1,8,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,3,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,2,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,7,1,5,1,20,1,17,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,4,1,1,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,1,1,1,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,3,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,177,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,3,1,212,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,252,1,0,1,0,1,1,1,216,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,152,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,0,1,160,1,6,1,0,1,32,1,80,1,7,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,28,131,0,0,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,32,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,26,1,0,1,0,1,16,1,19,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,8,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,48,1,30,1,18,1,0,1,34,131,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,1,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,4,1,0,1,200,1,2,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,6,1,0,1,20,1,24,1,0,1,2,1,0,1,167,1,167,1,27,1,175,1,4,1,7,1,3,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,3,1,3,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,2,1,2,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,2,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,192,1,0,1,160,1,2,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {236,51,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,86,191,153,252,254,107,227,239,95,195,252,243,107,252,26,191,9,253,255,215,113,127,254,255,250,249,245,232,255,191,255,101,243,251,79,127,13,71,135,111,235,192,127,173,95,227,246,116,96,56,171,16,206,255,244,155,200,119,255,214,175,113,123,56,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,121,126,253,95,131,227,189,9,2,53,19,167,253,222,191,169,124,247,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,159,209,126,130,54,20,51,54,59,174,205,95,52,212,102,247,215,248,131,128,215,111,166,237,252,7,113,42,94,235,126,46,227,248,91,238,97,156,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,0,254,235,14,188,143,152,55,246,254,111,72,255,63,91,54,109,182,156,2,2,143,225,245,60,155,229,245,175,113,137,119,126,77,109,131,207,241,110,234,189,251,27,209,151,91,222,4,188,161,223,87,222,223,255,7,197,212,191,157,71,163,25,253,254,206,251,251,143,162,223,255,60,255,251,223,76,126,130,6,255,158,126,14,122,253,41,250,253,223,68,159,253,117,244,255,63,85,255,254,167,232,247,127,140,254,255,91,233,123,126,219,255,138,62,255,207,188,182,32,202,255,65,127,191,137,180,221,162,207,126,183,223,204,181,253,61,233,247,199,218,238,215,147,31,220,254,255,166,199,12,239,49,62,248,181,255,239,255,251,255,250,191,127,143,95,227,228,205,241,147,223,137,254,252,39,127,13,249,12,248,255,78,220,234,215,72,255,33,250,231,247,214,247,127,45,250,239,15,160,159,43,250,255,159,244,107,24,158,254,181,126,141,63,75,97,254,85,252,217,175,73,255,253,122,191,198,223,164,159,73,158,226,175,253,107,127,77,254,230,215,97,56,183,121,148,87,255,218,95,135,184,245,215,228,255,188,207,119,251,159,211,199,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,220,144,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,191,11,13,139,120,238,15,34,14,249,147,240,123,242,107,128,247,127,211,63,73,62,255,53,255,160,95,75,127,255,53,48,228,223,224,55,253,139,204,239,191,38,253,254,132,73,240,155,82,155,255,140,190,251,207,254,34,130,243,107,255,154,191,198,175,79,176,254,51,254,255,175,203,223,255,250,4,143,255,254,147,8,215,95,235,215,252,53,126,75,106,255,63,252,73,191,174,190,139,118,191,230,175,241,149,182,53,127,255,103,127,210,175,195,236,202,176,254,162,95,147,241,195,231,212,247,111,240,27,208,239,255,247,31,244,132,251,146,190,127,77,234,219,180,255,53,229,253,191,8,237,127,83,238,239,215,164,246,191,134,254,254,107,209,239,95,233,239,191,14,253,254,215,116,112,252,191,255,162,223,132,251,144,119,228,119,121,71,126,151,119,254,239,255,91,104,110,120,234,215,208,231,207,130,128,253,218,255,23,241,84,107,121,234,207,253,53,229,51,180,53,60,245,167,209,103,79,245,253,223,228,215,248,232,215,120,78,63,127,95,250,255,99,30,224,111,194,114,250,244,215,20,121,148,124,153,227,31,77,115,253,255,254,81,125,110,199,221,213,123,95,247,185,252,154,114,242,19,172,154,127,211,191,136,216,226,247,240,225,169,60,252,65,191,134,202,201,175,237,201,15,100,201,200,15,100,236,215,182,178,244,27,253,65,191,142,253,253,55,38,30,52,191,255,38,127,208,175,103,127,255,77,255,160,95,223,201,30,224,255,71,6,14,201,216,127,228,193,215,207,127,77,192,215,223,127,45,192,215,223,127,109,192,215,223,127,29,130,255,235,255,71,204,102,34,107,44,135,191,38,255,14,25,20,185,147,191,127,13,130,1,153,253,207,254,32,247,217,95,67,239,187,207,4,198,255,77,120,202,103,63,198,178,244,107,254,71,144,189,223,132,100,80,254,254,181,254,35,145,69,243,247,175,195,127,255,102,246,239,223,128,255,254,205,69,206,127,45,232,143,95,83,241,250,181,248,119,31,175,223,16,58,128,250,254,203,254,164,95,235,215,248,203,20,47,180,49,120,253,242,63,232,119,35,24,191,150,202,243,175,201,191,255,6,24,11,247,69,186,224,63,34,125,241,7,253,6,218,55,233,3,254,251,199,236,223,191,14,255,157,40,46,160,21,254,54,122,13,186,6,255,79,4,183,255,72,116,198,175,241,23,9,174,191,193,127,244,27,255,26,127,205,95,244,107,253,26,255,55,235,185,95,251,215,248,181,255,163,95,155,219,27,250,254,103,127,240,111,168,112,49,55,191,6,227,193,244,98,92,127,35,253,14,115,133,191,127,45,253,14,243,240,27,83,31,66,27,254,155,117,221,175,205,116,195,119,95,253,197,160,201,175,27,180,255,138,219,255,218,76,235,95,195,234,43,168,34,223,6,126,155,141,90,196,6,254,90,255,159,181,129,123,95,71,182,157,140,253,250,127,83,87,158,241,59,205,159,249,124,208,6,210,156,253,77,176,129,79,116,190,241,55,236,146,225,227,174,77,252,181,228,239,191,73,120,244,55,7,15,235,239,191,5,253,254,127,255,77,190,61,252,181,58,246,241,215,80,121,80,184,196,115,191,6,127,238,228,65,108,32,250,248,77,25,38,120,236,215,208,223,127,173,63,8,50,37,191,255,58,232,215,231,239,63,200,218,64,125,71,126,151,119,228,119,121,7,184,18,45,184,223,46,127,233,116,252,26,255,222,111,65,255,252,90,176,135,255,216,175,109,248,235,223,253,77,228,51,16,208,240,215,191,246,155,248,246,240,215,234,217,195,127,235,215,248,145,61,212,56,202,142,251,223,186,241,141,31,61,63,122,126,244,252,48,158,31,245,241,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,243,231,185,252,154,57,135,159,160,124,226,127,193,249,196,223,243,247,244,115,138,221,252,195,109,242,137,146,19,147,223,145,11,64,62,209,228,11,144,59,251,47,40,103,52,102,184,191,233,223,164,57,8,206,221,253,58,191,198,87,127,210,111,146,34,87,254,213,223,244,235,72,126,243,15,146,191,127,13,252,253,39,105,78,193,251,252,175,161,207,255,154,200,231,255,55,125,254,127,243,231,154,103,251,131,144,163,232,228,184,254,36,211,247,175,165,125,255,166,94,223,248,236,55,245,250,254,181,180,15,247,185,244,221,255,92,250,254,181,108,223,191,22,247,253,107,217,190,127,45,238,91,243,120,182,239,223,172,211,247,111,54,208,247,111,54,208,247,111,22,237,251,215,233,244,253,235,216,190,37,127,247,27,208,247,255,247,159,244,99,66,147,127,72,215,69,76,158,244,31,50,121,27,249,251,215,225,191,127,45,151,39,229,191,41,167,248,23,1,54,114,58,50,15,230,111,30,55,230,91,255,102,92,144,23,253,139,126,55,158,123,201,239,112,74,133,240,248,47,40,71,168,120,252,71,50,79,97,190,214,228,68,77,190,214,228,68,127,29,202,123,118,242,88,24,31,231,68,233,239,127,9,223,1,182,124,255,27,252,75,200,135,34,47,42,227,151,156,168,246,203,121,170,95,199,245,203,127,255,186,174,95,254,251,215,179,127,255,6,252,247,175,47,249,174,94,78,21,121,240,161,156,42,242,226,67,57,85,244,11,124,37,119,230,114,170,191,134,205,185,153,246,146,83,253,53,153,30,46,167,138,231,71,57,213,31,229,84,127,182,114,170,120,252,156,234,207,128,57,56,167,250,251,88,254,186,251,107,202,103,248,97,248,107,139,254,216,249,53,24,56,231,84,15,232,231,183,127,141,159,191,249,211,15,177,211,191,9,219,233,15,91,247,83,157,247,15,169,93,180,58,31,127,251,58,95,237,135,213,249,248,219,232,124,99,71,141,206,23,30,194,90,153,249,91,236,141,209,249,102,45,94,244,214,111,0,94,179,58,31,252,236,235,124,252,237,235,124,252,237,235,124,209,205,195,58,31,176,111,163,243,127,13,197,95,251,229,191,125,157,255,107,40,254,58,126,254,251,155,214,249,240,79,128,111,87,231,67,54,111,210,249,255,79,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs0c.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs0c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs0c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs1c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 57 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs1c : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs1c' shader</summary>
		public vs1c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs1c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs1c.cid0 = state.GetNameUniqueID("v_SH");
			vs1c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs1c.cid2 = state.GetNameUniqueID("v_lights");
			vs1c.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs1c.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs1c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs1c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs1c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs1c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs1c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[15], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[14], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs1c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs1c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs1c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs1c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs1c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs1c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs1c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs1c.fx, vs1c.fxb, 56, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1c.vin[i]));
			index = vs1c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[11] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[12] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[16] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 8)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[17];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,156,135,0,1,3,131,0,5,1,0,0,1,48,135,0,1,17,131,0,1,4,131,0,1,1,229,0,0,229,0,0,201,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,60,1,0,1,0,1,1,1,88,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,16,1,144,135,0,0,1,3,1,0,1,0,1,16,1,12,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,224,1,0,1,0,1,15,1,220,131,0,0,1,93,134,0,0,1,15,1,248,1,0,1,0,1,15,1,244,1,0,1,0,1,16,1,64,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,20,1,0,1,0,1,16,1,16,131,0,0,1,93,134,0,0,1,16,1,44,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,128,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,84,1,0,1,0,1,16,1,80,131,0,0,1,93,134,0,0,1,16,1,108,1,0,1,0,1,16,1,104,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,5,1,128,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,160,1,0,1,0,1,2,1,224,135,0,0,1,36,1,0,1,0,1,2,131,0,0,1,2,1,40,138,0,0,1,1,1,216,131,0,0,1,28,1,0,1,0,1,1,1,203,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,196,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,4,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,160,1,0,1,81,1,0,1,7,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,12,1,0,1,10,1,0,1,13,1,0,1,11,1,0,1,14,1,0,1,12,1,0,1,47,1,0,1,13,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,32,1,0,1,0,1,16,1,31,1,0,1,0,1,16,1,29,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,32,1,12,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,14,1,194,1,0,1,18,133,0,0,1,32,1,20,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,96,1,40,1,18,1,0,1,18,133,0,0,1,96,1,46,1,48,1,52,1,18,1,0,1,34,131,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,5,1,0,1,27,1,0,1,0,1,225,1,7,1,5,1,0,1,200,1,15,1,0,1,5,1,0,1,198,1,0,1,0,1,235,1,7,1,3,1,5,1,200,1,15,1,0,1,5,1,0,1,177,1,148,1,148,1,235,1,7,1,4,1,5,1,200,1,15,1,0,1,5,1,0,1,108,1,248,1,148,1,235,1,7,1,2,1,5,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,17,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,18,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,19,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,20,1,0,1,200,1,7,1,0,1,3,1,0,1,177,1,180,1,0,1,225,1,1,1,3,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,4,1,3,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,5,1,8,1,8,1,88,1,136,1,0,1,3,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,30,1,0,1,1,1,4,1,12,1,252,1,27,1,160,1,5,1,14,1,6,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,6,1,6,1,16,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,5,1,5,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,5,1,14,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,200,1,7,131,0,0,1,21,1,108,1,0,1,225,1,1,1,0,1,0,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,149,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,19,1,216,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,216,1,0,1,0,1,4,136,0,0,1,36,1,0,1,0,1,15,1,64,1,0,1,0,1,15,1,104,138,0,0,1,15,1,24,131,0,0,1,28,1,0,1,0,1,15,1,11,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,4,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,216,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,192,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,16,1,12,1,0,1,32,1,32,1,13,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,56,1,0,1,0,1,16,1,51,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,16,1,38,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,64,1,75,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,9,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,7,1,17,1,0,1,200,1,15,1,0,1,6,1,160,1,27,1,136,1,0,1,161,1,7,1,18,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,7,1,19,1,9,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,7,1,19,1,4,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,7,1,17,1,2,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,0,1,9,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,7,1,17,1,2,1,200,1,15,1,0,1,6,1,160,1,177,1,52,1,148,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,7,1,19,1,4,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,9,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,7,1,19,1,4,1,200,1,15,1,0,1,6,1,160,1,108,1,255,1,143,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,7,1,17,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,248,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,8,1,0,1,190,1,190,1,0,1,176,1,2,1,3,1,0,1,200,1,4,1,0,1,8,1,0,1,190,1,190,1,0,1,176,1,2,1,2,1,0,1,20,1,17,1,0,1,9,1,0,1,190,1,190,1,27,1,176,1,2,1,0,1,1,1,168,1,36,1,8,1,9,1,0,1,190,1,190,1,0,1,144,1,2,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,8,1,8,1,0,1,200,1,1,1,0,1,6,1,0,1,191,1,190,1,0,1,240,1,7,1,3,1,0,1,200,1,2,1,0,1,6,1,0,1,195,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,4,1,0,1,6,1,0,1,191,1,190,1,0,1,240,1,4,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,7,1,5,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,6,1,4,1,1,1,168,1,66,1,4,1,2,1,0,1,190,1,190,1,0,1,144,1,6,1,5,1,6,1,20,1,20,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,6,1,6,1,1,1,168,1,136,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,7,1,20,1,31,1,0,1,1,1,0,1,167,1,167,1,27,1,224,1,3,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,16,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,1,1,14,1,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,1,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,150,1,252,1,27,1,160,1,1,1,14,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,150,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,4,1,188,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,36,1,0,1,0,1,2,1,152,135,0,0,1,36,1,0,1,0,1,1,1,148,1,0,1,0,1,1,1,188,138,0,0,1,1,1,108,131,0,0,1,28,1,0,1,0,1,1,1,95,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,17,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,88,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,32,1,80,1,8,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,22,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,20,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,9,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,34,131,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,3,1,0,1,200,1,1,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,6,1,0,1,20,1,24,1,0,1,1,1,0,1,167,1,167,1,27,1,175,1,4,1,7,1,2,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,2,1,2,1,16,1,200,1,15,1,128,1,2,132,0,0,1,226,1,1,1,1,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,1,1,14,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,1,1,8,1,8,1,200,1,14,1,0,1,1,1,4,1,252,1,252,1,0,1,160,1,1,1,14,1,0,1,200,1,1,1,0,1,2,1,0,1,195,1,195,1,0,1,240,1,1,1,1,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,88,1,130,1,0,1,2,1,0,1,190,1,190,1,27,1,240,1,4,1,4,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,1,1,0,1,1,1,0,1,177,1,27,1,108,1,139,1,2,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,177,1,160,1,0,1,16,1,130,1,168,1,135,1,0,1,3,1,0,1,192,1,27,1,128,1,193,1,3,1,0,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,141,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {60,56,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,162,223,76,126,255,181,241,55,253,127,231,215,148,191,127,115,250,255,175,163,159,253,232,9,159,95,143,254,255,251,95,54,191,255,244,215,112,116,123,167,132,250,181,126,141,219,211,141,225,172,66,56,233,111,42,223,253,91,191,198,237,225,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,230,249,245,127,13,142,247,38,8,212,76,156,246,71,105,156,246,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,191,78,251,9,218,80,204,216,236,184,54,255,210,80,155,221,95,227,215,7,94,191,153,182,243,31,196,169,120,173,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,129,151,127,221,129,247,17,243,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,254,53,46,241,206,175,169,109,240,57,222,77,189,119,31,211,151,191,183,55,1,127,24,253,254,23,121,127,143,168,195,111,123,52,250,211,232,247,191,202,251,251,239,162,223,255,57,255,251,223,76,126,130,6,191,145,254,14,122,253,41,250,253,127,68,109,255,61,250,255,159,170,127,255,111,244,251,47,167,255,63,141,180,253,237,232,179,223,234,55,115,109,119,232,247,17,253,255,15,139,180,253,189,233,179,55,94,219,21,253,94,106,187,95,79,126,112,251,255,155,30,51,188,199,248,224,215,254,191,255,239,255,235,255,254,61,126,141,147,55,199,79,126,39,250,243,159,252,53,228,51,224,255,59,113,171,95,35,253,135,232,159,223,91,223,255,181,232,191,63,128,126,174,232,255,127,210,175,97,120,250,215,250,53,254,44,133,249,87,241,103,191,38,253,247,235,253,26,127,147,126,38,121,138,191,246,175,253,53,249,155,95,135,225,220,230,81,94,253,107,127,29,226,214,95,147,255,243,62,223,237,127,78,31,223,251,253,119,126,141,47,138,105,93,53,213,121,155,110,189,186,147,126,251,249,235,231,169,112,67,122,82,45,86,69,73,191,60,28,239,125,58,126,120,127,111,188,119,176,191,255,107,252,46,52,44,226,185,63,136,56,228,79,194,239,9,253,254,107,254,26,191,233,159,36,159,255,154,127,208,175,165,191,255,26,24,242,111,240,155,254,69,230,247,95,147,126,127,194,36,248,77,169,205,127,70,223,253,103,127,17,193,249,181,127,205,95,227,215,39,88,255,25,255,255,215,229,239,127,125,130,199,127,255,73,132,235,175,245,107,254,26,191,37,181,255,31,254,164,95,87,223,69,187,95,243,215,248,74,219,154,191,255,179,63,233,215,97,118,101,88,96,73,253,156,250,254,13,126,3,250,253,255,254,131,158,112,95,210,247,175,73,125,155,246,191,166,188,255,23,161,253,111,202,253,253,154,212,254,215,208,223,127,45,250,253,43,253,253,215,161,223,255,154,14,142,255,247,95,244,155,112,31,242,142,252,46,239,200,239,242,206,255,253,127,11,205,13,79,253,26,250,252,91,16,222,95,251,255,34,158,250,131,44,79,253,179,191,166,124,134,182,134,167,254,49,250,236,169,190,255,155,255,26,31,253,26,207,233,231,239,75,255,47,121,128,191,57,203,105,251,107,138,60,74,190,204,241,207,111,110,58,251,209,19,60,170,255,45,157,186,122,242,235,62,151,95,83,174,126,130,85,249,111,250,23,17,27,253,30,62,60,149,159,63,232,215,80,185,250,181,61,121,131,236,25,121,131,76,254,218,86,246,126,163,63,232,215,177,191,255,198,196,179,230,247,223,228,15,250,245,236,239,191,233,31,244,235,59,89,5,252,255,200,192,33,153,252,143,60,248,250,249,175,9,248,250,251,175,5,248,250,251,175,13,248,250,251,175,67,240,127,253,255,136,217,82,100,147,229,246,215,228,223,33,179,34,167,242,247,175,65,48,32,227,255,217,31,228,62,251,107,232,125,247,153,192,248,191,9,79,249,236,199,88,246,126,205,255,8,178,250,155,147,204,202,223,191,22,255,253,91,216,191,127,29,254,251,183,180,127,255,6,252,247,111,245,107,136,204,27,125,243,27,252,26,255,247,95,252,27,208,103,191,1,227,247,27,24,61,192,58,227,215,18,29,192,237,73,135,255,65,9,201,249,175,73,120,208,160,8,23,232,2,180,255,191,255,32,25,155,209,33,255,55,225,46,223,253,90,52,86,106,251,107,255,218,66,131,63,248,55,17,157,244,107,129,102,210,55,143,131,232,249,159,241,255,127,125,166,151,232,16,163,151,240,249,175,193,115,241,159,253,65,191,27,191,43,120,11,109,185,79,166,237,175,69,115,42,180,253,147,84,7,254,134,10,231,47,251,147,126,173,95,227,191,182,240,12,109,201,130,50,188,95,215,210,1,184,252,230,152,11,204,207,31,148,210,223,191,14,235,189,95,131,232,253,127,51,125,72,139,48,30,191,46,255,31,237,127,109,30,239,175,99,255,254,141,185,125,242,107,252,105,86,175,254,24,235,212,175,232,243,255,141,113,254,117,137,46,160,41,230,4,58,22,176,126,67,157,35,232,89,252,253,27,217,191,127,29,254,251,55,86,186,129,167,240,247,175,197,223,253,250,255,145,208,193,217,11,232,116,252,63,97,122,200,247,232,75,232,243,27,252,71,191,217,175,241,215,252,69,191,214,175,241,127,255,73,128,245,107,255,26,191,246,127,68,180,253,147,252,57,248,77,181,31,240,241,175,173,253,152,249,248,205,148,15,126,109,230,35,252,253,213,95,12,62,248,117,131,54,95,253,69,2,251,215,225,54,70,195,211,103,129,15,241,109,72,218,175,21,241,33,126,173,255,207,250,16,123,95,71,215,57,157,243,235,255,77,158,254,177,186,136,116,129,249,124,208,135,160,249,255,155,224,67,224,239,95,83,255,134,93,151,57,23,222,246,125,138,95,75,254,254,155,68,190,193,207,127,141,254,254,91,128,151,255,38,223,159,248,181,58,254,5,244,152,232,2,134,251,23,97,254,241,185,209,39,198,135,64,31,191,169,234,143,95,83,125,8,232,143,95,83,125,136,95,139,248,250,215,84,31,226,215,180,56,169,15,161,239,200,239,242,142,252,46,239,176,220,255,6,130,79,151,191,116,58,126,141,231,191,21,253,243,107,193,159,248,151,126,109,195,95,191,225,111,42,159,129,128,134,191,126,157,223,212,247,39,126,173,158,63,241,111,253,26,63,242,39,222,247,209,184,213,210,233,223,186,241,141,31,61,255,127,121,126,52,142,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,254,223,241,92,126,205,28,197,79,80,62,246,191,230,124,236,239,249,123,250,57,217,110,190,226,54,249,88,196,245,38,31,43,185,163,223,244,79,50,249,5,228,68,255,107,202,49,141,25,238,111,250,55,105,206,226,215,193,119,191,206,175,241,213,159,244,155,167,156,71,251,155,126,29,201,15,255,65,242,247,175,129,191,255,36,205,65,120,159,255,53,244,249,95,19,249,252,255,166,207,255,111,254,252,199,52,255,246,107,112,46,208,229,34,127,77,253,251,215,229,60,135,244,253,91,120,125,227,179,223,194,235,251,215,210,62,220,231,210,119,255,115,233,251,215,178,125,35,183,200,249,58,237,251,215,226,190,127,173,78,223,191,101,167,239,223,114,160,239,223,114,160,239,223,50,218,247,175,211,233,251,215,177,125,255,154,60,79,191,1,125,255,127,255,73,63,38,52,249,135,116,29,202,228,153,249,239,95,211,254,253,235,240,223,191,150,203,51,243,223,191,182,254,77,201,26,206,11,253,250,246,111,166,49,225,103,254,230,113,99,254,245,111,198,5,57,90,228,151,204,90,149,205,29,35,15,175,227,227,60,148,140,65,114,216,191,27,243,161,228,161,100,92,191,1,127,255,107,113,255,120,151,199,197,99,68,110,247,191,166,124,229,175,195,60,246,27,112,110,251,215,224,92,238,87,156,191,254,53,180,45,190,255,181,181,31,202,157,114,158,212,228,214,204,103,232,23,121,228,95,91,251,253,181,133,175,120,140,242,55,207,53,143,81,254,102,250,243,24,241,238,175,231,189,11,30,252,117,229,59,202,11,187,220,234,127,77,185,219,36,248,251,171,191,40,181,176,93,142,26,223,255,90,27,222,255,181,189,247,77,14,251,215,240,198,117,155,28,246,175,71,180,193,251,102,62,165,47,55,159,248,219,228,176,49,159,248,219,228,176,41,127,255,31,225,239,95,139,251,250,245,255,35,201,51,198,115,216,244,247,191,132,239,29,174,191,193,191,132,252,53,242,216,194,167,97,14,27,243,110,114,216,88,163,249,53,109,63,50,230,223,76,115,216,191,166,151,195,254,117,108,142,211,180,249,74,97,255,58,220,198,101,21,127,148,195,254,81,14,251,103,47,135,141,199,207,97,255,119,132,144,228,176,115,203,95,191,255,175,41,159,225,135,225,175,223,155,254,216,249,53,24,56,231,176,15,232,231,183,127,141,31,229,171,111,251,124,136,95,244,155,179,95,244,97,235,212,63,198,188,249,107,254,67,234,135,88,27,139,191,125,27,171,246,218,218,88,252,109,108,172,216,170,255,236,79,50,54,86,116,25,248,220,194,227,191,141,141,253,53,196,254,252,73,190,141,253,53,58,54,214,200,132,172,153,134,54,246,215,82,57,249,13,92,223,252,255,174,141,133,173,249,205,85,231,250,54,22,52,233,218,88,35,231,176,167,190,61,48,159,161,223,95,71,229,12,253,170,31,241,39,25,27,171,126,196,159,100,108,172,250,17,60,70,99,159,253,119,205,58,239,111,168,127,67,15,252,230,164,251,147,224,239,95,227,47,74,127,13,89,7,198,223,190,141,85,123,30,216,88,243,254,175,99,255,150,181,215,95,67,109,236,251,174,19,227,253,31,83,124,252,117,98,140,213,95,39,198,88,253,117,98,216,88,179,78,124,91,27,235,112,253,230,109,44,230,251,38,27,251,255,4,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs1c.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs1c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs1c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs3c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 71 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class vs3c : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs3c' shader</summary>
		public vs3c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs3c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs3c.cid0 = state.GetNameUniqueID("v_SH");
			vs3c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs3c.cid2 = state.GetNameUniqueID("v_lights");
			vs3c.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs3c.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs3c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs3c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs3c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs3c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs3c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[21], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[20], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[13], ref this.vreg[14], ref this.vreg[15], ref this.vreg[16], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[9], ref this.vreg[10], ref this.vreg[11], ref this.vreg[12], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs3c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs3c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs3c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs3c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs3c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs3c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs3c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs3c.fx, vs3c.fxb, 68, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3c.vin[i]));
			index = vs3c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[17] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[18] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[19] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[22] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 9)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[23];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,252,135,0,1,3,131,0,5,1,0,0,1,144,135,0,1,23,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,196,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,216,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,128,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,232,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,12,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,48,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,156,1,0,1,0,1,1,1,184,138,0,0,1,1,1,228,1,0,1,0,1,2,139,0,0,1,15,1,140,1,0,1,0,1,15,1,168,138,0,0,1,15,1,244,1,0,1,0,1,16,1,8,138,0,0,1,16,1,24,1,0,1,0,1,16,1,44,138,0,0,1,16,1,240,135,0,0,1,3,1,0,1,0,1,16,1,108,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,64,1,0,1,0,1,16,1,60,131,0,0,1,93,134,0,0,1,16,1,88,1,0,1,0,1,16,1,84,1,0,1,0,1,16,1,160,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,116,1,0,1,0,1,16,1,112,131,0,0,1,93,134,0,0,1,16,1,140,1,0,1,0,1,16,1,136,1,0,1,0,1,16,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,180,1,0,1,0,1,16,1,176,131,0,0,1,93,134,0,0,1,16,1,204,1,0,1,0,1,16,1,200,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,7,1,108,1,16,1,42,1,17,1,1,1,0,1,0,1,3,131,0,0,1,4,1,108,135,0,0,1,36,1,0,1,0,1,2,1,96,1,0,1,0,1,2,1,136,138,0,0,1,2,1,56,131,0,0,1,28,1,0,1,0,1,2,1,43,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,2,1,36,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,4,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,4,1,44,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,9,1,0,1,0,1,48,1,10,1,0,1,0,1,160,1,11,1,0,1,0,1,80,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,15,1,0,1,47,1,0,1,16,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,87,1,0,1,0,1,16,1,60,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,34,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,9,1,32,1,15,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,17,1,194,1,0,1,18,133,0,0,1,32,1,23,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,96,1,61,1,96,1,67,1,18,1,0,1,18,133,0,0,1,96,1,73,1,96,1,79,1,18,1,0,1,18,133,0,0,1,48,1,85,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,2,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,3,1,4,1,200,1,15,1,0,1,6,1,0,1,108,1,248,1,148,1,235,1,5,1,1,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,23,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,24,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,25,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,26,1,0,1,200,1,7,1,0,1,2,1,0,1,198,1,180,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,3,1,2,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,0,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,7,1,0,1,1,1,4,1,103,1,27,1,98,1,139,1,6,1,3,1,3,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,131,6,0,1,200,1,7,1,0,1,2,1,4,1,20,1,27,1,192,1,139,1,6,1,0,1,0,1,88,1,40,1,0,1,7,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,6,1,20,1,9,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,9,1,9,1,22,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,6,1,6,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,6,1,20,1,0,1,200,1,7,1,0,1,7,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,36,1,9,1,0,1,0,1,190,1,190,1,0,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,2,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,198,1,161,1,1,1,5,1,128,1,176,1,72,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,23,1,0,1,6,1,0,1,192,1,27,1,108,1,225,1,4,1,2,1,128,1,88,1,29,1,0,1,4,1,0,1,240,1,108,1,27,1,225,1,2,1,0,1,129,1,88,1,29,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,108,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,192,1,235,1,3,1,0,1,6,1,168,1,75,1,8,1,0,1,0,1,190,1,108,1,130,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,27,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,108,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,190,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,190,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,108,1,0,1,225,1,3,1,0,1,0,1,21,1,1,131,0,0,1,205,1,190,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,190,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,190,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,62,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,62,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,62,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,21,1,184,1,16,1,42,1,17,1,1,1,0,1,0,1,16,1,56,1,0,1,0,1,5,1,128,135,0,0,1,36,1,0,1,0,1,15,1,160,1,0,1,0,1,15,1,200,138,0,0,1,15,1,120,131,0,0,1,28,1,0,1,0,1,15,1,107,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,100,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,216,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,5,1,64,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,10,1,0,1,0,1,48,1,11,1,0,1,0,1,160,1,12,1,0,1,0,1,80,1,13,1,0,1,0,1,16,1,14,1,0,1,48,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,110,1,0,1,0,1,16,1,83,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,55,1,0,1,0,1,16,1,60,1,0,1,0,1,16,1,53,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,10,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,16,1,96,1,22,1,18,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,16,1,40,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,41,1,96,1,47,1,18,1,0,1,18,133,0,0,1,96,1,53,1,96,1,59,1,18,1,0,1,18,133,0,0,1,96,1,65,1,96,1,71,1,18,1,0,1,18,133,0,0,1,96,1,77,1,96,1,83,1,18,1,0,1,18,133,0,0,1,96,1,89,1,96,1,95,1,18,1,0,1,18,133,0,0,1,96,1,101,1,64,1,107,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,12,1,9,1,200,1,15,1,0,1,0,1,160,1,27,1,136,1,0,1,161,1,6,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,6,1,24,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,6,1,25,1,9,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,171,1,6,1,23,1,0,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,9,1,9,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,148,1,171,1,6,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,25,1,4,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,10,1,9,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,6,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,108,1,255,1,143,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,23,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,131,0,0,1,248,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,0,1,11,1,0,1,200,1,4,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,0,1,12,1,0,1,20,1,17,1,0,1,9,1,0,1,195,1,190,1,27,1,176,1,0,1,9,1,1,1,168,1,36,1,7,1,9,1,0,1,195,1,190,1,0,1,144,1,0,1,10,1,11,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,6,1,2,1,0,1,200,1,2,1,0,1,3,1,0,1,195,1,190,1,0,1,240,1,3,1,2,1,0,1,200,1,4,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,4,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,13,1,1,1,168,1,18,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,14,1,13,1,20,1,20,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,15,1,1,1,168,1,40,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,16,1,14,1,20,1,18,131,0,0,1,190,1,190,1,27,1,176,1,3,1,13,1,1,1,168,1,68,1,4,1,0,1,0,1,190,1,190,1,0,1,144,1,3,1,15,1,15,1,20,1,24,131,0,0,1,190,1,190,1,27,1,176,1,3,1,14,1,1,1,168,1,136,1,4,1,1,1,0,1,18,1,18,1,0,1,208,1,0,1,0,1,16,1,20,1,31,1,0,1,3,1,0,1,167,1,167,1,27,1,224,1,2,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,22,1,200,1,15,1,128,1,2,132,0,0,1,224,1,2,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,1,1,4,1,201,1,27,1,98,1,139,131,3,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,186,1,27,1,192,1,139,1,3,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,186,1,192,1,27,1,160,1,3,1,20,1,129,1,200,1,7,1,128,1,4,1,0,1,201,1,108,1,0,1,225,131,0,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,6,1,168,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,132,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,1,1,244,1,0,1,0,1,2,1,28,138,0,0,1,1,1,204,131,0,0,1,28,1,0,1,0,1,1,1,191,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,184,131,0,0,1,48,1,0,1,2,131,0,0,1,23,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,32,1,80,1,11,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,25,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,23,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,8,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,12,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,16,1,96,1,22,1,18,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,0,1,0,1,34,133,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,9,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,10,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,11,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,12,1,0,1,200,1,1,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,13,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,15,1,0,1,200,1,4,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,14,1,0,1,200,1,1,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,13,1,0,1,200,1,2,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,14,1,0,1,200,1,4,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,15,1,0,1,20,1,24,1,0,1,3,1,0,1,167,1,167,1,27,1,175,1,2,1,16,1,1,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,1,1,1,1,22,1,200,1,15,1,128,1,2,132,0,0,1,226,1,3,1,3,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,14,1,0,1,1,1,4,1,118,1,27,1,118,1,139,131,3,0,1,200,1,4,131,0,0,1,205,1,205,1,0,1,240,1,5,1,5,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,27,1,192,1,139,1,3,1,0,1,0,1,200,1,7,1,0,1,3,1,4,1,192,1,192,1,0,1,160,1,3,1,20,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,88,1,65,131,0,0,1,190,1,190,1,198,1,240,1,2,1,2,1,128,1,168,1,33,1,9,1,1,1,0,1,201,1,201,1,0,1,208,1,1,1,1,1,2,1,172,1,24,1,9,1,2,1,0,1,190,1,190,1,0,1,208,1,4,1,4,1,5,1,200,1,7,1,128,1,4,1,0,1,180,1,198,1,0,1,225,1,5,1,0,1,0,1,88,1,132,1,2,1,9,1,0,131,27,0,1,161,1,2,1,8,1,130,1,176,1,71,1,0,1,7,1,0,1,192,1,198,1,65,1,193,1,5,1,0,1,22,1,88,1,23,1,0,1,6,1,0,1,192,1,27,1,108,1,225,1,4,1,2,1,128,1,88,1,29,1,0,1,4,1,0,1,240,1,108,1,108,1,225,1,2,1,0,1,129,1,88,1,29,1,0,1,1,1,0,1,5,1,108,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,108,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,192,1,235,1,3,1,0,1,6,1,168,1,75,1,8,1,0,1,0,1,180,1,108,1,130,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,27,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,108,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {144,59,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,141,223,92,126,255,181,241,55,253,255,79,250,53,229,239,223,150,254,255,235,232,103,63,122,126,184,207,175,71,255,255,253,47,155,223,127,250,107,184,121,249,183,116,34,126,173,95,227,246,243,194,112,86,33,156,63,232,55,149,239,254,173,95,227,246,112,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,252,250,191,6,199,123,19,4,106,38,78,251,175,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,111,244,155,69,218,80,204,216,236,184,54,59,67,109,118,127,141,95,31,120,225,235,95,71,190,178,15,226,84,12,161,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,129,151,127,221,129,247,17,243,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,254,53,126,93,188,243,107,106,27,124,142,119,83,239,221,63,143,190,252,187,188,9,248,207,240,251,175,101,255,252,53,254,56,234,240,175,210,249,194,243,203,233,247,223,224,55,115,127,255,118,244,251,200,251,251,151,235,239,160,65,169,191,3,220,159,162,223,255,158,244,217,99,250,255,159,170,127,255,222,244,251,27,250,255,95,22,105,251,142,62,107,189,182,127,18,253,254,199,209,255,255,179,72,219,191,139,62,251,219,188,182,255,18,253,254,207,105,187,95,79,126,112,251,255,155,30,51,220,199,248,224,215,254,191,255,239,255,235,255,254,61,126,141,147,55,199,79,126,39,250,243,159,252,53,228,51,224,255,59,113,171,95,35,253,135,232,159,223,91,223,255,181,232,191,63,128,126,174,232,255,127,210,175,97,120,250,215,250,53,254,44,133,249,87,241,103,191,38,253,247,235,253,26,127,147,126,38,121,138,191,246,175,253,53,249,155,95,199,39,239,198,71,121,245,175,253,117,136,91,127,77,254,207,251,124,183,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,13,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,187,208,176,136,231,254,32,226,144,63,9,191,39,244,251,175,249,107,252,166,127,146,124,254,107,254,65,191,150,254,254,107,96,200,191,193,111,250,23,153,223,127,77,250,253,9,147,224,55,165,54,255,25,125,247,159,253,69,4,231,215,254,53,127,141,95,159,96,253,103,252,255,95,151,191,255,245,9,30,255,141,20,220,175,245,107,254,26,191,37,181,255,31,254,164,95,87,223,69,187,95,243,215,248,74,219,154,191,255,179,63,233,215,97,118,101,88,127,209,175,201,248,225,115,234,251,55,248,13,232,247,255,251,15,122,194,125,73,223,191,38,245,109,218,255,154,242,254,95,132,246,191,41,247,247,107,82,251,95,67,127,255,181,232,247,175,244,247,95,135,126,255,107,58,56,254,223,127,209,111,194,125,200,59,242,187,188,35,191,203,59,255,247,255,45,52,55,60,245,107,232,243,239,129,217,126,237,255,139,120,234,207,178,60,245,201,175,37,159,225,135,225,169,223,141,254,120,170,239,255,182,244,239,115,250,249,251,210,255,255,57,30,224,111,203,114,250,175,253,154,34,143,146,47,115,252,243,219,50,136,31,61,63,236,71,237,139,157,135,174,30,254,186,207,229,215,148,219,159,32,83,241,59,254,26,191,233,95,68,108,250,123,144,102,253,61,13,188,29,54,33,191,233,255,244,107,155,15,244,81,185,253,131,126,13,149,231,95,219,147,115,200,188,145,115,232,130,95,219,202,252,111,244,7,253,58,246,247,223,152,100,197,252,254,155,252,65,191,158,253,253,55,253,131,126,125,167,35,0,255,63,50,112,72,23,252,71,30,124,253,252,215,4,124,253,253,215,2,124,253,253,215,6,124,253,253,215,33,248,191,254,127,196,226,32,178,201,250,66,116,11,116,133,209,15,191,225,31,132,62,127,157,95,227,47,35,221,242,151,253,65,78,103,252,53,244,62,233,164,95,227,151,255,65,191,27,203,186,232,36,129,199,58,134,225,253,90,252,187,131,39,127,3,222,127,246,39,145,94,249,131,220,103,2,207,124,38,48,254,111,26,183,124,246,99,172,67,126,205,255,8,125,252,182,164,123,228,239,95,139,255,254,237,236,223,191,14,255,253,219,219,191,127,3,254,251,119,160,191,127,45,139,203,127,246,7,255,86,244,247,111,64,127,255,218,172,123,255,51,254,255,175,207,243,5,186,253,26,60,134,95,243,215,248,13,254,160,223,241,215,248,53,24,206,175,77,52,132,238,250,205,21,238,175,77,180,195,223,191,133,254,141,182,248,251,183,20,61,250,107,253,58,68,231,95,251,215,248,175,255,32,249,29,109,255,111,254,253,215,102,152,127,205,95,244,11,217,101,248,207,254,39,208,231,215,161,207,126,109,250,254,119,252,53,190,250,139,198,76,187,95,243,111,250,117,232,111,34,192,175,247,235,26,61,159,254,223,127,49,209,236,111,250,53,82,232,220,95,227,111,250,13,244,189,95,151,245,191,224,254,235,210,223,120,15,48,241,158,124,199,112,126,29,154,103,30,35,198,134,207,49,95,191,62,125,70,244,254,131,126,3,110,255,155,243,231,191,166,254,253,235,209,223,191,190,254,253,107,114,219,95,147,105,65,176,126,93,244,251,107,165,255,55,227,241,235,240,252,252,26,127,80,74,125,128,207,126,61,208,78,191,251,245,120,236,62,78,191,54,247,161,127,83,123,240,58,241,108,250,167,41,172,95,227,215,5,222,191,166,142,241,215,101,158,249,223,254,32,204,219,175,67,159,255,58,58,86,252,13,58,10,205,126,141,191,232,227,95,131,137,9,254,251,143,126,29,197,31,243,129,241,254,214,58,239,50,63,255,247,31,244,219,80,251,95,151,223,255,53,245,239,175,244,239,223,132,218,255,73,127,18,254,159,48,159,252,250,255,209,175,253,107,252,42,134,47,60,252,27,252,71,191,214,175,241,127,255,73,191,13,205,157,204,227,175,77,223,139,173,253,117,28,109,126,29,194,235,63,82,184,127,241,175,163,124,68,188,242,31,25,158,130,28,26,25,129,28,254,90,250,187,200,225,127,102,109,30,125,22,248,81,223,134,212,255,90,17,63,234,215,250,255,172,31,181,247,117,244,177,211,127,191,254,223,228,233,66,171,23,73,215,154,207,7,253,40,162,243,223,4,63,234,9,243,133,252,13,223,70,230,89,229,237,215,112,126,213,175,37,127,255,77,152,167,95,139,228,226,215,252,53,254,26,253,253,183,0,15,253,77,190,79,245,107,117,124,172,95,195,234,60,134,11,94,228,207,241,25,244,165,241,163,208,199,111,202,48,193,151,191,134,254,14,157,243,149,254,14,29,34,126,212,175,105,113,82,63,74,223,145,223,229,29,249,93,222,1,174,68,11,238,183,203,95,58,29,191,198,211,223,154,254,249,181,224,83,253,87,191,182,225,175,183,191,169,124,6,2,26,254,154,253,166,155,125,170,127,235,215,248,145,79,245,255,182,71,115,3,118,30,254,173,27,223,144,231,71,255,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,92,126,205,28,200,79,80,158,236,127,252,53,144,147,254,61,127,79,201,75,203,179,243,13,230,164,145,79,48,57,105,228,44,144,147,54,121,13,228,113,255,71,202,119,73,174,242,55,253,155,52,87,194,249,218,95,231,215,248,234,79,250,237,57,127,247,21,231,243,240,217,111,175,249,188,95,135,211,80,156,251,240,62,255,107,232,243,191,38,242,249,255,141,220,34,127,254,99,156,243,248,117,254,32,228,82,76,95,191,150,246,245,219,122,125,225,179,223,214,235,75,243,200,222,231,210,87,255,115,233,203,228,152,101,45,75,114,206,191,46,231,244,164,175,223,206,235,11,159,253,118,94,95,191,182,194,116,159,75,95,253,207,165,175,95,219,246,245,107,113,95,248,91,114,152,191,1,253,253,127,255,73,248,14,185,83,228,135,126,51,155,171,230,28,52,183,149,191,127,77,254,251,215,178,127,115,78,154,105,244,27,240,92,253,58,127,16,218,254,166,250,62,242,68,248,251,55,182,127,255,90,252,247,111,66,127,255,110,60,207,146,251,146,60,229,175,255,31,153,220,36,37,143,254,160,255,145,242,164,63,166,48,240,57,242,220,130,35,227,192,48,229,111,201,147,255,38,250,55,250,64,123,147,55,7,78,248,219,228,205,37,55,46,56,74,94,23,180,150,252,60,250,198,26,6,112,4,126,200,13,27,58,253,122,140,235,63,45,185,45,198,47,204,169,3,103,172,29,56,62,253,53,255,166,95,75,115,234,200,123,35,79,28,203,169,227,61,228,189,229,255,146,175,215,247,126,157,223,128,222,195,231,191,54,231,175,5,167,31,163,207,126,3,165,55,242,239,63,246,107,200,90,194,111,168,127,255,186,140,195,95,243,23,37,193,223,95,241,216,126,3,162,13,126,23,94,164,126,52,111,142,254,126,3,202,225,165,220,231,175,197,239,248,57,117,110,171,57,245,95,223,195,73,120,64,240,55,56,152,60,185,193,225,55,96,30,16,28,228,253,95,155,241,87,120,191,206,175,255,107,252,198,156,207,247,115,242,232,195,228,228,127,125,194,235,215,255,53,254,183,63,8,115,133,57,192,250,129,244,135,185,53,52,255,202,230,228,41,127,250,31,161,141,240,209,111,250,31,129,238,202,71,255,208,175,201,191,91,62,225,191,19,199,39,252,247,111,104,255,254,13,248,239,223,232,215,144,60,45,253,253,47,249,249,248,95,83,243,241,191,129,192,102,62,49,185,127,252,77,232,216,220,63,214,213,252,92,63,225,248,47,253,26,148,235,55,243,242,107,184,121,161,28,237,111,240,31,201,187,95,253,197,178,134,229,195,251,74,251,254,117,184,141,203,166,254,40,119,255,163,220,253,207,94,238,30,143,159,187,255,207,8,176,228,238,127,137,229,175,127,240,215,148,207,240,195,240,215,223,69,127,236,252,26,12,156,115,247,7,244,243,219,191,198,143,242,244,255,111,121,62,196,31,252,109,217,31,132,47,248,123,254,158,6,222,206,55,228,15,254,6,170,243,224,91,248,190,3,254,254,77,236,223,226,123,192,142,195,46,130,207,125,95,194,172,35,195,191,33,254,178,190,132,89,51,199,223,144,159,95,67,251,144,191,127,45,254,219,248,18,144,163,95,67,251,80,155,193,239,251,190,5,254,54,190,133,248,0,255,217,159,4,255,9,118,0,190,197,175,53,224,91,96,125,217,248,22,178,230,238,124,139,223,246,215,8,125,11,245,209,232,115,183,94,143,53,95,248,22,102,157,61,230,91,224,61,216,66,177,153,226,91,232,123,191,142,89,139,255,181,249,111,193,201,248,27,120,23,190,224,111,192,248,137,93,55,235,234,192,45,9,254,254,53,120,108,88,175,199,239,176,223,188,22,174,254,3,250,163,190,255,160,148,251,252,181,248,29,223,183,48,235,228,24,167,177,239,190,111,241,235,121,56,24,223,194,224,128,62,127,109,197,65,222,255,181,25,127,133,247,235,252,122,228,91,252,122,29,223,2,125,24,223,226,215,35,221,247,235,253,26,255,219,31,132,185,194,28,192,199,66,127,248,219,248,22,128,253,241,175,225,124,139,95,151,225,139,111,97,252,119,248,22,152,119,223,183,192,223,190,111,129,191,125,223,2,127,255,108,250,22,102,94,16,91,232,188,4,190,5,108,192,77,190,197,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs3c.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs3c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs3c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps1n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class ps1n : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel
	{
		/// <summary>Construct an instance of the 'ps1n' shader</summary>
		public ps1n()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps1n.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps1n.cid0 = state.GetNameUniqueID("v_SH");
			ps1n.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps1n.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps1n.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps1n.cid4 = state.GetNameUniqueID("p_lights");
			ps1n.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps1n.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps1n.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps1n.tid0 = state.GetNameUniqueID("CustomTexture");
			ps1n.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps1n.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps1n.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps1n.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps1n.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps1n.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps1n.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps1n.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps1n.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps1n.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps1n.fx, ps1n.fxb, 45, 54);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 5;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1n.vin[i]));
			index = ps1n.vin[(i + 5)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[4] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[3] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,4,5,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,192,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,244,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,15,1,220,1,0,1,0,1,15,1,240,138,0,0,1,16,1,180,135,0,0,1,3,1,0,1,0,1,16,1,48,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,4,1,0,1,0,1,16,132,0,0,1,93,134,0,0,1,16,1,28,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,100,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,56,1,0,1,0,1,16,1,52,131,0,0,1,93,134,0,0,1,16,1,80,1,0,1,0,1,16,1,76,1,0,1,0,1,16,1,164,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,120,1,0,1,0,1,16,1,116,131,0,0,1,93,134,0,0,1,16,1,144,1,0,1,0,1,16,1,140,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,48,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,140,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,0,1,113,1,0,1,9,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,9,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,0,1,96,1,10,1,0,1,12,1,0,1,11,1,0,1,13,1,0,1,12,1,0,1,14,1,0,1,13,1,0,1,47,1,0,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,44,131,0,0,1,45,1,0,1,0,1,16,1,46,1,0,1,0,1,16,1,49,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,36,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,48,1,12,1,18,1,3,1,18,1,0,1,112,1,21,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,32,1,21,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,48,1,47,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,80,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,7,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,7,1,2,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,7,1,8,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,7,1,4,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,7,1,0,1,177,1,180,1,0,1,225,1,6,1,2,1,0,1,200,1,7,1,0,1,9,1,0,1,177,1,180,1,0,1,225,1,5,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,180,1,0,1,225,1,1,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,108,1,180,1,192,1,235,1,1,1,8,1,2,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,5,1,8,1,9,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,8,1,7,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,6,1,4,1,6,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,5,1,4,1,5,1,200,1,7,1,0,1,4,1,0,1,27,1,192,1,180,1,235,1,1,1,4,1,2,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,5,1,5,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,5,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,4,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,220,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,196,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,7,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,112,1,11,1,0,1,0,1,96,1,12,1,0,1,0,1,16,1,13,1,0,1,32,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,75,131,0,0,1,76,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,70,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,64,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,16,1,14,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,16,1,39,1,18,1,0,1,18,135,0,0,1,96,1,40,1,196,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,80,1,76,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,144,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,10,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,10,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,8,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,8,1,15,1,0,1,92,1,15,1,0,1,7,1,160,1,27,1,136,1,177,1,161,1,8,1,16,1,10,1,200,1,15,1,0,1,7,1,160,1,198,1,136,1,0,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,8,1,14,1,3,1,92,1,2,1,0,1,10,1,0,131,27,0,1,161,1,1,1,0,1,10,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,8,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,7,1,160,1,177,1,52,1,148,1,171,1,8,1,16,1,7,1,92,1,8,1,0,1,10,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,10,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,8,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,10,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,10,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,10,1,10,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,9,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,9,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,7,1,9,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,7,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,5,1,6,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,120,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,16,1,0,1,0,1,2,1,104,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,40,1,0,1,113,1,0,1,5,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,5,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,0,1,112,1,8,1,0,1,32,1,96,1,9,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,40,131,0,0,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,44,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,241,1,85,1,80,1,5,1,0,1,0,1,18,1,1,1,194,133,0,0,1,64,1,10,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,16,1,44,1,18,1,0,1,34,131,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,6,1,0,1,200,1,8,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,7,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {180,61,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,177,223,76,126,255,181,241,247,175,97,254,249,53,126,141,223,132,254,255,235,184,63,255,127,253,252,122,244,255,223,255,178,249,253,167,191,134,163,195,59,29,248,175,251,107,252,236,209,129,251,93,133,253,166,191,169,124,247,111,253,26,63,123,253,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,248,243,235,255,26,28,31,78,16,168,153,56,237,143,210,56,237,215,209,255,127,19,113,154,246,83,160,159,223,232,215,16,184,127,157,246,19,180,161,152,177,217,113,109,254,165,161,54,187,191,70,106,218,252,242,161,54,123,191,198,28,184,255,102,218,206,127,126,45,250,63,94,235,126,46,99,109,82,208,226,55,139,124,143,191,99,239,253,24,253,255,73,153,47,103,197,242,2,192,17,91,199,222,71,92,28,123,255,55,164,255,159,45,155,54,91,78,1,129,199,240,122,158,205,242,250,215,152,225,119,224,133,241,226,119,188,155,122,239,254,70,244,229,150,55,73,127,24,253,254,23,121,127,143,168,195,111,123,52,250,211,232,247,191,202,251,251,239,162,223,255,57,239,239,127,143,126,255,159,252,239,127,51,249,9,154,236,232,239,160,223,159,162,223,255,58,248,140,254,255,167,234,223,191,19,253,254,219,209,255,231,145,182,143,233,179,3,175,237,27,250,253,37,253,255,175,138,180,253,25,250,236,157,215,246,79,163,223,255,36,109,247,235,201,15,110,255,127,211,99,134,251,51,32,206,175,253,127,255,223,255,215,255,253,147,191,198,201,155,227,39,191,19,253,249,227,191,166,124,134,175,126,39,105,150,254,78,244,89,169,239,255,186,244,111,75,63,255,48,250,255,191,246,107,24,57,248,181,126,141,127,79,97,254,119,252,217,175,73,255,253,122,191,198,47,215,207,126,157,95,19,159,253,90,244,89,194,244,199,35,249,142,191,246,175,253,53,185,245,175,195,60,240,179,241,168,140,252,181,191,14,113,196,175,201,255,121,159,239,14,124,190,215,255,156,62,190,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,225,188,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,255,215,248,9,34,217,175,251,107,252,166,127,17,129,248,7,127,141,95,227,15,250,61,12,94,191,11,145,147,198,252,7,17,151,254,73,248,61,161,223,127,205,95,227,55,253,147,228,243,95,243,15,250,181,236,239,191,214,31,244,107,107,155,95,247,215,248,181,255,160,95,199,254,254,235,252,65,191,174,253,253,215,253,131,126,61,251,251,175,247,7,253,250,250,59,117,243,39,253,26,191,193,111,250,23,153,223,127,77,239,247,95,139,126,255,13,120,250,126,77,130,249,159,253,73,248,255,175,207,223,253,154,132,211,175,65,159,65,116,126,19,234,251,79,250,147,136,107,254,98,122,133,219,255,154,252,253,175,226,255,163,61,205,61,225,13,220,241,251,111,64,120,255,223,127,209,175,195,83,254,107,210,103,255,55,127,247,235,254,26,95,253,69,191,30,127,255,107,234,223,232,247,55,33,24,255,25,253,253,213,31,36,237,127,19,250,137,190,126,13,254,252,119,163,246,191,214,175,241,235,211,247,191,234,15,122,66,237,127,237,95,227,55,37,216,255,25,141,225,63,251,139,126,45,198,131,113,3,172,191,232,215,229,239,209,246,175,33,58,96,44,191,198,175,35,127,127,69,56,254,103,127,210,175,77,240,76,31,192,233,215,165,126,240,46,250,248,181,181,15,161,197,111,142,62,254,32,180,199,223,191,22,253,141,113,226,239,148,255,254,181,152,54,4,227,47,146,49,252,218,60,30,188,227,198,244,21,125,246,39,41,13,126,125,124,247,23,233,152,24,47,154,111,133,9,218,252,103,60,182,95,83,199,246,107,208,216,126,93,238,231,215,231,239,126,77,133,251,107,242,59,255,25,247,243,107,242,28,253,150,244,251,255,240,39,253,186,250,46,218,161,95,255,239,95,211,235,239,215,86,28,126,77,243,254,111,240,27,48,29,252,190,127,45,234,219,180,71,187,95,135,223,249,207,254,160,223,84,231,13,239,203,239,191,22,247,37,191,255,58,244,251,95,163,99,151,247,104,92,127,209,111,194,125,200,59,242,187,188,35,191,203,59,255,247,255,253,107,240,99,116,210,175,161,207,31,6,69,240,107,255,95,164,147,90,171,147,254,220,95,83,62,67,91,163,147,254,52,250,236,169,190,255,155,252,26,31,253,26,207,233,231,239,75,255,127,204,3,252,77,88,239,63,165,223,223,252,154,38,167,235,116,205,111,194,32,254,255,255,168,15,97,199,253,235,184,175,62,232,185,252,0,93,248,107,176,46,116,122,16,143,234,164,63,232,215,80,157,247,107,7,186,16,242,245,155,170,62,251,141,136,191,204,239,191,49,241,168,249,253,55,33,30,52,191,255,166,164,3,228,119,210,79,36,255,242,59,233,31,146,105,211,134,251,250,143,12,124,146,47,254,61,145,190,244,243,95,19,125,233,239,191,22,250,210,223,127,109,244,165,191,255,58,208,187,250,251,175,11,189,171,191,255,122,212,215,175,255,31,137,172,254,166,172,95,125,57,254,245,127,141,175,254,36,124,71,125,65,54,89,78,241,221,175,15,189,172,114,143,239,161,243,126,221,224,251,191,134,117,25,190,255,13,24,222,111,160,109,1,83,244,175,232,183,95,227,215,254,245,185,255,255,204,254,109,250,254,13,168,111,3,239,55,240,250,115,159,221,190,143,223,160,215,199,111,202,125,252,26,182,15,252,221,237,3,159,185,62,132,70,191,1,125,246,127,123,239,252,223,172,199,241,253,143,137,141,226,126,126,19,210,73,242,247,175,197,127,255,166,246,239,95,135,255,254,205,236,223,191,1,255,253,155,255,26,162,79,127,13,29,251,175,169,120,137,174,18,188,240,185,251,76,240,242,237,143,188,135,223,129,227,175,193,240,73,31,254,71,120,247,55,208,254,72,39,242,223,63,102,255,254,117,248,239,132,254,198,187,224,17,163,187,9,230,127,4,56,10,243,63,250,141,127,141,191,134,127,255,181,127,141,95,27,109,254,36,216,54,240,12,225,255,7,255,134,250,62,120,207,205,199,175,201,56,253,70,250,29,120,81,108,131,216,114,250,236,15,250,141,21,190,234,109,214,235,191,54,245,245,107,240,119,95,253,197,104,243,235,106,123,253,76,113,248,117,184,141,209,198,244,89,224,47,254,81,80,32,191,86,196,95,252,181,126,228,47,70,252,197,189,175,171,35,135,252,197,95,131,245,214,175,255,55,121,58,204,234,51,146,27,251,249,175,229,181,249,181,189,223,127,29,239,247,95,215,251,253,215,115,191,111,244,23,159,56,222,252,155,224,135,61,97,126,148,191,127,13,253,251,215,210,191,225,79,252,6,252,247,111,0,29,247,55,225,255,208,31,248,155,124,68,150,57,248,94,191,22,222,101,255,82,218,255,218,210,158,255,143,246,191,14,255,205,126,36,241,58,191,107,248,153,198,240,127,243,119,198,191,252,181,181,173,241,7,197,239,147,190,126,29,249,251,111,250,181,248,29,145,111,162,1,116,179,202,142,200,186,241,39,127,29,254,27,62,213,127,246,55,153,247,133,86,248,219,233,12,248,50,191,142,126,246,187,49,190,70,207,98,236,191,29,222,231,62,126,3,238,227,55,87,156,196,159,164,230,76,11,223,159,4,254,138,7,143,65,252,73,231,155,121,254,228,223,100,62,19,157,21,190,103,116,54,224,26,221,47,58,23,243,249,155,211,207,191,230,111,146,223,127,11,244,255,55,109,242,37,125,223,213,247,37,61,156,48,166,191,200,248,139,191,150,231,47,138,207,252,149,254,254,235,252,65,190,191,40,190,182,248,139,198,199,148,223,229,29,249,93,222,97,92,127,3,193,167,171,159,126,13,125,254,171,223,146,254,249,181,224,59,254,99,191,182,209,79,255,238,111,34,159,129,137,141,126,250,215,126,19,223,119,252,181,122,190,227,191,245,107,252,200,119,212,60,151,29,247,191,117,227,27,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,124,46,63,32,175,244,95,112,94,233,247,252,61,227,121,165,205,185,247,95,159,115,73,46,151,110,114,239,146,75,148,223,127,45,206,143,252,166,127,146,196,247,200,195,255,103,127,210,127,65,249,148,49,247,241,155,254,77,154,159,248,117,240,29,229,108,254,164,223,36,69,206,224,43,228,49,176,46,240,7,201,223,191,6,114,17,127,146,230,101,189,207,255,26,250,252,175,137,124,142,220,197,255,205,159,255,6,154,31,69,78,221,244,245,107,105,95,191,169,215,23,62,251,77,189,190,126,45,133,233,62,151,190,250,159,75,95,191,150,237,235,215,226,190,116,253,239,215,145,124,253,87,127,210,111,230,245,133,207,126,51,175,47,93,139,244,62,151,190,250,159,75,95,102,45,18,121,16,244,101,254,254,117,56,215,43,121,23,249,251,215,226,191,127,93,251,247,175,195,127,255,122,250,55,232,34,121,43,147,199,119,107,177,148,7,251,143,240,57,254,246,218,122,52,253,181,248,111,55,238,95,135,255,254,217,192,229,215,243,112,249,49,109,251,107,120,184,72,142,91,254,150,239,127,45,254,222,224,246,107,72,223,252,183,124,255,235,240,247,6,215,95,67,112,225,191,127,77,238,251,55,248,131,176,246,240,99,2,251,31,210,124,215,95,36,127,255,90,252,247,175,105,255,254,117,248,239,95,203,254,253,27,240,223,191,182,142,75,242,94,142,14,146,251,114,116,144,252,151,208,225,119,99,153,144,28,152,228,225,126,131,63,232,191,160,60,166,226,241,31,201,120,221,122,135,140,215,173,119,224,111,179,190,64,57,71,254,91,224,252,250,255,210,127,161,249,124,130,249,47,153,245,133,95,83,215,23,20,190,157,47,133,111,231,75,225,219,249,210,113,242,223,180,150,254,23,33,87,170,235,60,118,125,2,107,102,157,249,177,235,19,88,67,19,154,201,119,191,198,175,225,214,39,208,47,112,69,30,241,215,244,214,39,76,254,177,187,62,241,107,242,184,221,250,4,158,31,173,79,120,159,255,104,125,226,71,235,19,63,90,159,224,254,255,223,176,62,129,199,95,159,216,130,18,226,245,137,223,199,234,167,187,191,166,124,134,31,70,63,109,209,31,59,248,248,215,144,245,137,3,250,249,237,95,227,231,239,90,196,135,248,188,191,9,235,42,167,167,240,116,245,211,251,248,188,191,129,218,165,95,155,121,78,116,2,228,4,127,27,59,15,251,137,191,141,191,3,251,249,107,8,159,178,206,144,191,69,15,192,247,146,239,254,111,149,65,241,189,124,216,191,78,7,246,175,115,75,216,191,158,7,251,199,4,246,63,164,190,148,245,111,240,183,239,223,168,47,101,253,27,245,157,180,47,241,189,124,220,126,205,14,110,191,166,226,6,93,99,228,90,108,247,111,0,121,177,254,13,228,196,247,111,240,183,239,223,224,111,223,191,249,53,21,14,252,27,192,145,223,135,253,155,95,67,241,84,248,252,183,239,223,252,26,138,167,142,147,255,254,166,253,27,232,12,224,10,61,228,251,55,244,221,141,254,205,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps1n.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps1n.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps1n.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps1n.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps1n.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps2n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class ps2n : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel
	{
		/// <summary>Construct an instance of the 'ps2n' shader</summary>
		public ps2n()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps2n.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps2n.cid0 = state.GetNameUniqueID("v_SH");
			ps2n.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps2n.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps2n.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps2n.cid4 = state.GetNameUniqueID("p_lights");
			ps2n.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps2n.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps2n.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps2n.tid0 = state.GetNameUniqueID("CustomTexture");
			ps2n.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps2n.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps2n.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps2n.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps2n.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps2n.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps2n.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps2n.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps2n.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps2n.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps2n.fx, ps2n.fxb, 45, 67);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 5;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2n.vin[i]));
			index = ps2n.vin[(i + 5)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[7] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[6] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 6)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,4,5,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[8];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,240,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,168,135,0,0,1,8,131,0,0,1,4,131,0,0,1,1,229,0,0,158,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,220,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,144,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,36,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,180,1,0,1,0,1,1,1,208,138,0,0,1,15,1,92,1,0,1,0,1,15,1,120,138,0,0,1,15,1,196,1,0,1,0,1,15,1,216,138,0,0,1,15,1,232,1,0,1,0,1,15,1,252,138,0,0,1,16,1,12,1,0,1,0,1,16,1,32,138,0,0,1,16,1,228,135,0,0,1,3,1,0,1,0,1,16,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,52,1,0,1,0,1,16,1,48,131,0,0,1,93,134,0,0,1,16,1,76,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,104,1,0,1,0,1,16,1,100,131,0,0,1,93,134,0,0,1,16,1,128,1,0,1,0,1,16,1,124,1,0,1,0,1,16,1,212,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,168,1,0,1,0,1,16,1,164,131,0,0,1,93,134,0,0,1,16,1,192,1,0,1,0,1,16,1,188,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,48,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,140,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,0,1,113,1,0,1,9,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,9,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,0,1,96,1,10,1,0,1,12,1,0,1,11,1,0,1,13,1,0,1,12,1,0,1,14,1,0,1,13,1,0,1,47,1,0,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,44,131,0,0,1,45,1,0,1,0,1,16,1,46,1,0,1,0,1,16,1,49,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,36,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,48,1,12,1,18,1,3,1,18,1,0,1,112,1,21,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,32,1,21,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,48,1,47,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,80,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,7,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,7,1,2,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,7,1,8,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,7,1,4,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,7,1,0,1,177,1,180,1,0,1,225,1,6,1,2,1,0,1,200,1,7,1,0,1,9,1,0,1,177,1,180,1,0,1,225,1,5,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,180,1,0,1,225,1,1,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,108,1,180,1,192,1,235,1,1,1,8,1,2,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,5,1,8,1,9,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,8,1,7,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,6,1,4,1,6,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,5,1,4,1,5,1,200,1,7,1,0,1,4,1,0,1,27,1,192,1,180,1,235,1,1,1,4,1,2,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,5,1,5,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,5,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,4,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,220,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,196,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,7,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,112,1,11,1,0,1,0,1,96,1,12,1,0,1,0,1,16,1,13,1,0,1,32,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,75,131,0,0,1,76,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,70,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,64,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,16,1,14,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,16,1,39,1,18,1,0,1,18,135,0,0,1,96,1,40,1,196,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,80,1,76,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,144,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,10,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,10,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,8,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,8,1,15,1,0,1,92,1,15,1,0,1,7,1,160,1,27,1,136,1,177,1,161,1,8,1,16,1,10,1,200,1,15,1,0,1,7,1,160,1,198,1,136,1,0,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,8,1,14,1,3,1,92,1,2,1,0,1,10,1,0,131,27,0,1,161,1,1,1,0,1,10,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,8,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,7,1,160,1,177,1,52,1,148,1,171,1,8,1,16,1,7,1,92,1,8,1,0,1,10,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,10,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,8,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,10,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,10,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,10,1,10,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,9,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,9,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,7,1,9,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,7,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,5,1,6,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,120,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,16,1,0,1,0,1,2,1,104,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,40,1,0,1,113,1,0,1,5,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,5,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,0,1,112,1,8,1,0,1,32,1,96,1,9,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,40,131,0,0,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,44,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,241,1,85,1,80,1,5,1,0,1,0,1,18,1,1,1,194,133,0,0,1,64,1,10,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,16,1,44,1,18,1,0,1,34,131,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,6,1,0,1,200,1,8,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,7,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {208,65,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,249,111,38,191,255,218,248,251,215,48,255,252,26,191,198,111,66,255,255,117,220,159,255,191,126,126,61,250,255,239,127,217,252,254,211,95,195,209,225,175,210,129,255,6,191,198,255,123,232,192,120,174,66,60,95,254,166,242,221,191,245,107,252,191,7,207,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,249,242,252,250,191,6,199,147,19,4,106,38,78,251,187,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,191,167,253,4,109,40,102,108,118,92,155,95,227,55,27,104,179,251,107,252,65,166,205,239,54,212,102,79,112,199,215,191,142,124,101,159,95,139,254,143,238,187,159,155,177,130,22,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,248,242,215,29,120,31,113,113,236,253,223,144,254,127,182,108,218,108,57,5,4,30,195,235,121,54,203,235,95,99,134,223,129,23,198,139,223,241,110,234,189,251,27,209,151,91,222,36,253,109,244,251,191,228,253,253,251,82,135,239,60,90,255,99,244,251,191,229,253,253,95,209,239,255,135,247,247,111,244,155,17,252,223,204,251,94,127,7,77,254,0,253,29,244,251,83,244,251,125,250,108,135,254,255,167,234,223,207,233,247,111,211,255,255,172,72,219,146,62,155,123,109,255,48,250,253,15,162,255,255,91,145,182,127,29,125,246,87,121,109,255,49,250,253,31,210,118,191,158,252,224,246,255,55,61,102,184,191,55,190,248,181,255,239,255,251,255,250,191,39,191,198,201,155,227,39,191,19,253,249,250,215,148,207,64,183,223,73,154,165,207,233,179,82,223,255,13,232,223,150,126,254,97,244,255,95,231,215,52,114,240,107,49,93,241,252,78,252,217,175,73,255,253,122,191,198,239,166,159,237,243,103,191,22,125,150,252,26,143,245,51,201,119,252,181,127,237,175,201,173,127,29,206,199,252,191,225,81,153,250,107,127,29,226,160,95,147,255,243,62,223,29,248,124,175,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,169,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,19,36,14,191,193,175,241,155,254,69,4,226,31,116,88,253,158,191,39,62,255,49,249,252,15,162,255,225,187,127,136,62,255,135,240,121,34,159,255,26,254,231,59,44,86,191,233,255,244,107,201,23,246,249,93,104,26,127,93,134,241,235,255,73,248,61,161,223,127,205,95,227,55,253,147,228,243,95,243,15,250,181,236,239,191,214,31,244,107,107,155,95,247,215,248,181,255,160,95,199,254,254,235,252,65,191,174,253,253,215,253,131,126,61,251,251,175,247,7,253,250,250,59,117,243,39,253,26,191,193,111,250,23,153,223,127,77,239,247,95,139,126,127,194,108,243,155,82,95,255,25,125,247,159,253,69,191,22,255,253,235,19,78,255,217,31,244,27,252,26,191,198,95,68,248,253,218,191,38,255,253,21,193,255,207,254,164,95,135,89,13,127,255,26,212,7,189,67,237,126,29,22,109,124,246,215,16,62,242,217,239,70,125,252,154,14,14,193,252,53,169,29,222,255,207,254,164,95,159,251,255,53,25,6,205,209,175,245,107,73,187,63,9,191,211,56,169,253,95,243,23,253,154,220,230,215,226,223,127,33,171,145,255,236,127,250,117,25,206,175,195,184,252,6,191,198,255,205,184,254,58,132,59,250,253,177,95,227,63,227,119,64,19,188,243,123,83,195,95,143,190,35,196,254,56,122,151,198,241,215,252,65,238,179,175,254,56,194,241,47,162,241,120,159,253,53,127,220,175,229,125,246,235,240,103,255,247,31,247,107,235,103,232,235,215,211,190,18,250,12,109,126,125,250,155,196,150,97,25,248,242,217,87,12,235,215,87,88,242,217,95,195,176,194,207,254,239,63,238,215,241,62,251,117,21,222,175,229,193,251,117,21,222,175,205,159,249,237,254,26,126,55,252,236,255,254,227,126,93,253,12,115,66,124,66,124,3,154,255,223,127,240,175,99,231,225,215,193,60,240,255,127,125,158,163,223,64,231,13,180,252,245,249,243,95,243,215,248,191,249,253,95,79,254,254,147,48,79,248,28,115,250,27,208,103,191,158,194,250,117,126,141,223,92,219,203,223,191,230,175,241,219,209,79,249,91,120,2,252,249,127,235,252,124,245,23,167,252,206,175,197,240,127,125,250,255,175,199,115,252,235,120,253,255,218,12,15,127,227,101,240,194,175,207,176,190,194,56,248,51,240,138,142,15,60,203,243,2,62,1,79,160,143,143,127,13,233,248,215,144,177,211,231,255,55,183,123,194,248,9,159,255,26,196,231,248,251,215,210,191,127,173,223,64,120,231,215,254,53,126,75,250,251,127,248,147,12,45,48,14,252,223,201,128,208,77,248,240,55,37,248,95,217,239,241,247,175,33,237,255,36,211,63,209,233,47,250,181,89,190,157,140,0,23,26,211,95,132,207,126,83,166,191,200,129,252,46,227,144,223,29,93,126,13,197,133,230,247,47,250,77,64,179,223,64,222,145,223,229,29,249,93,222,97,217,249,13,48,175,255,247,31,244,127,255,223,191,6,63,198,222,252,26,250,252,97,48,244,191,246,255,69,246,166,181,246,230,207,253,53,229,51,180,253,157,164,89,250,167,209,103,79,245,253,223,228,215,248,232,215,120,78,63,127,95,250,255,99,238,228,55,193,160,126,141,167,244,251,155,95,211,228,247,157,29,249,77,24,196,255,255,31,245,15,237,184,127,29,247,213,7,61,151,31,96,183,126,13,182,67,127,208,239,225,195,83,189,255,7,253,26,106,87,192,155,206,222,64,158,126,83,181,25,191,17,241,182,249,253,55,38,222,53,191,255,38,196,143,230,119,232,27,249,253,215,103,91,32,191,147,76,147,14,48,109,184,175,255,200,192,39,25,226,223,19,233,75,63,255,53,209,151,254,254,107,161,47,253,253,215,70,95,250,251,175,3,219,166,191,255,186,176,109,250,251,175,71,125,253,250,255,145,216,10,232,235,255,140,101,215,200,234,175,255,107,124,197,54,229,215,98,89,117,182,235,215,135,237,83,217,22,185,255,77,217,110,185,239,255,154,63,233,215,214,239,127,3,134,247,27,88,93,96,116,38,116,24,250,250,245,185,255,255,204,254,237,108,222,87,22,222,111,224,245,231,62,187,125,31,191,65,175,15,209,53,191,134,237,3,127,119,251,192,103,174,15,161,209,111,64,159,253,223,222,59,208,193,98,175,127,76,108,52,247,243,155,144,126,146,191,127,45,254,251,55,181,127,255,58,252,247,111,102,255,254,13,248,239,223,156,109,142,243,27,126,77,197,75,244,150,224,229,235,192,95,83,241,194,103,191,219,175,97,237,63,227,248,107,49,142,191,6,195,39,221,248,31,225,221,223,64,251,35,253,200,127,255,152,253,251,215,225,191,97,143,241,46,120,228,215,178,112,126,253,255,8,112,20,230,127,244,27,171,79,241,107,255,26,191,54,218,252,73,98,55,126,83,208,230,15,254,13,245,125,240,158,155,143,95,147,113,250,141,172,95,241,155,254,71,248,91,222,251,53,209,199,31,244,27,43,124,213,225,127,17,198,247,107,83,95,191,6,127,247,213,95,140,54,191,174,182,215,207,20,135,95,135,219,24,109,76,159,5,177,0,152,248,215,248,181,34,177,192,175,245,163,88,224,27,136,5,246,190,174,78,117,177,128,211,171,78,207,253,250,127,147,167,243,172,254,35,57,179,159,255,90,94,155,95,219,251,253,215,241,126,255,117,189,223,127,61,247,251,173,124,120,226,221,191,9,62,252,19,230,95,249,219,247,117,240,55,124,29,225,97,163,167,196,199,255,181,249,239,175,160,7,255,38,225,99,252,13,28,254,179,191,201,248,94,198,199,255,117,244,51,200,238,175,173,112,126,55,198,135,125,46,126,31,254,211,175,197,237,254,239,191,24,190,235,111,192,56,252,6,120,151,255,255,235,243,187,191,1,181,249,191,89,94,137,211,160,51,89,134,208,238,215,101,255,30,126,168,248,137,191,150,182,197,247,68,35,134,241,107,179,111,41,254,151,241,93,241,217,111,192,127,255,230,250,183,224,6,95,22,126,227,111,192,99,253,237,216,135,197,119,233,175,33,62,233,175,45,125,253,69,2,235,215,214,190,4,182,244,247,21,254,102,252,126,61,29,27,73,237,95,252,107,120,99,3,76,252,223,31,155,25,207,175,181,97,60,234,43,6,227,249,245,188,207,126,3,254,251,55,183,56,99,60,191,190,155,63,194,239,183,99,63,217,140,231,215,163,241,192,239,254,53,117,60,191,134,142,7,239,155,185,69,204,162,243,109,113,248,181,248,179,95,3,112,255,38,243,217,175,43,99,230,190,204,103,198,175,54,184,42,60,254,191,111,3,197,246,128,47,126,115,250,249,215,252,77,242,251,111,1,188,254,38,99,199,126,77,134,245,149,190,103,254,14,125,104,224,100,236,90,204,135,254,181,60,31,250,215,242,124,232,95,171,227,67,227,61,227,67,27,191,91,126,151,119,228,119,121,135,113,253,13,4,159,174,158,254,53,244,249,175,126,75,250,231,215,130,15,253,143,253,218,70,79,255,187,191,137,124,6,225,252,157,164,89,250,175,253,38,190,15,253,107,245,124,232,127,235,215,248,145,15,173,185,92,59,238,127,235,198,55,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,249,92,126,64,190,236,191,224,124,217,239,249,123,198,243,101,155,215,32,126,125,206,145,185,53,5,179,6,33,57,85,249,253,215,226,252,212,111,250,39,73,124,143,245,136,255,236,79,250,47,40,159,53,230,62,126,211,191,73,243,19,191,14,190,251,117,41,39,253,155,164,156,243,64,110,3,235,35,127,144,252,253,107,32,23,241,39,105,126,195,251,252,175,161,207,255,154,200,231,200,93,252,223,252,249,111,240,107,72,158,24,107,11,166,175,95,75,251,250,77,189,190,240,217,111,234,245,245,107,41,76,247,185,244,213,255,92,250,250,181,108,95,191,22,247,245,107,105,95,191,182,246,245,155,121,125,225,179,223,204,235,75,115,119,222,231,210,87,255,115,233,235,215,182,125,253,58,220,151,249,251,215,225,156,55,231,238,254,34,249,251,215,226,191,127,93,251,247,175,195,127,255,122,250,55,232,18,174,51,75,206,92,243,105,255,145,172,27,255,26,218,23,183,245,104,250,107,241,223,110,220,188,102,253,179,130,203,175,231,225,242,99,218,246,215,240,112,145,92,191,252,45,223,255,90,252,189,193,237,215,144,190,249,111,249,254,215,225,239,13,174,191,134,224,194,127,255,154,220,247,111,240,7,97,13,230,199,4,246,63,164,249,174,191,72,254,254,181,248,239,95,211,254,253,235,240,223,191,150,253,251,55,224,191,93,62,149,113,181,116,144,220,151,163,131,228,191,132,14,191,27,203,132,228,192,36,15,247,27,252,65,255,5,229,91,21,143,255,72,198,235,214,125,100,188,110,221,7,127,155,117,22,202,181,242,223,2,231,215,255,151,254,11,93,215,32,152,255,146,89,103,249,53,117,157,69,225,219,249,82,248,118,190,20,190,157,47,29,39,255,141,28,31,114,213,186,222,101,215,105,176,118,216,153,31,187,78,131,181,68,161,153,124,247,107,252,26,110,157,6,253,254,23,154,99,254,53,189,117,26,147,127,236,174,211,252,154,60,110,183,78,131,231,71,235,52,155,159,31,173,211,252,104,157,230,71,235,52,63,90,167,249,185,92,167,193,227,175,211,108,17,54,178,78,243,251,88,61,125,247,215,148,207,240,227,119,146,102,233,22,253,177,131,143,127,13,89,167,57,160,159,223,254,53,126,254,174,201,124,136,239,255,155,176,14,118,250,23,79,87,239,190,143,239,255,27,168,125,254,181,153,231,68,150,127,13,245,135,141,191,3,63,2,127,27,191,15,126,196,175,33,124,202,178,46,127,255,223,214,7,149,239,68,110,1,251,215,233,192,254,117,58,176,127,157,8,236,24,236,95,207,131,253,99,2,251,31,130,172,248,126,30,254,246,253,60,252,237,251,121,248,219,232,99,227,131,250,184,253,154,29,220,126,77,197,13,58,199,200,245,175,201,191,255,6,144,23,235,231,65,78,124,63,15,127,251,126,30,254,246,253,188,95,83,225,192,207,3,28,249,125,216,207,251,53,20,79,133,207,127,251,126,222,175,161,120,234,56,249,239,111,218,207,131,206,0,174,208,67,190,159,71,223,221,232,231,253,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps2n.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps2n.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps2n.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps2n.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps2n.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps1nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class ps1nc : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'ps1nc' shader</summary>
		public ps1nc()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps1nc.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps1nc.cid0 = state.GetNameUniqueID("v_SH");
			ps1nc.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps1nc.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps1nc.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps1nc.cid4 = state.GetNameUniqueID("p_lights");
			ps1nc.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps1nc.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps1nc.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps1nc.tid0 = state.GetNameUniqueID("CustomTexture");
			ps1nc.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps1nc.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps1nc.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps1nc.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps1nc.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps1nc.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps1nc.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps1nc.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps1nc.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps1nc.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps1nc.fx, ps1nc.fxb, 48, 54);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 6;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1nc.vin[i]));
			index = ps1nc.vin[(i + 6)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[4] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[3] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,4,5,0,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,192,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,244,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,15,1,220,1,0,1,0,1,15,1,240,138,0,0,1,16,1,180,135,0,0,1,3,1,0,1,0,1,16,1,48,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,4,1,0,1,0,1,16,132,0,0,1,93,134,0,0,1,16,1,28,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,100,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,56,1,0,1,0,1,16,1,52,131,0,0,1,93,134,0,0,1,16,1,80,1,0,1,0,1,16,1,76,1,0,1,0,1,16,1,164,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,120,1,0,1,0,1,16,1,116,131,0,0,1,93,134,0,0,1,16,1,144,1,0,1,0,1,16,1,140,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,76,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,144,1,0,1,0,1,2,1,188,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,124,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,10,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,112,1,10,1,0,1,0,1,96,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,46,131,0,0,1,47,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,38,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,64,1,12,1,18,1,3,1,18,1,0,1,240,1,85,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,64,1,48,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,160,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,10,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,9,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,5,1,3,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,8,1,0,1,177,1,180,1,0,1,225,1,6,1,10,1,0,1,200,1,7,1,0,1,5,1,0,1,177,1,180,1,0,1,225,1,2,1,10,1,0,1,200,1,7,1,0,1,10,1,0,1,177,1,180,1,0,1,225,1,1,1,10,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,9,1,10,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,2,1,9,1,5,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,9,1,8,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,6,1,3,1,6,1,200,1,7,1,0,1,6,1,0,1,27,1,192,1,180,1,235,1,2,1,3,1,5,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,1,1,3,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,88,1,33,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,6,1,6,1,128,1,88,1,33,1,1,1,0,1,0,1,190,1,190,1,108,1,240,1,2,1,2,1,129,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,177,1,0,1,225,1,6,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,236,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,200,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,113,1,0,1,11,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,8,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,112,1,12,1,0,1,0,1,96,1,13,1,0,1,0,1,16,1,14,1,0,1,32,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,76,131,0,0,1,77,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,67,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,73,1,0,1,0,1,16,1,65,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,32,1,14,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,16,1,40,1,18,1,0,1,18,135,0,0,1,96,1,41,1,196,1,0,1,18,133,0,0,1,96,1,47,1,96,1,53,1,18,1,0,1,18,133,0,0,1,96,1,59,1,96,1,65,1,18,1,0,1,18,133,0,0,1,96,1,71,1,80,1,77,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,160,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,11,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,11,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,9,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,9,1,15,1,0,1,92,1,15,1,0,1,8,1,160,1,27,1,136,1,177,1,161,1,9,1,16,1,11,1,200,1,15,1,0,1,8,1,160,1,198,1,136,1,0,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,9,1,14,1,3,1,92,1,2,1,0,1,11,1,0,131,27,0,1,161,1,1,1,0,1,11,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,9,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,177,1,52,1,148,1,171,1,9,1,16,1,8,1,92,1,8,1,0,1,11,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,11,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,9,1,160,1,108,1,208,1,148,1,171,1,9,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,9,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,11,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,11,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,11,1,11,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,9,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,9,1,10,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,10,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,10,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,9,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,5,1,6,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,20,1,0,1,0,1,2,1,116,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,52,1,0,1,113,1,0,1,6,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,6,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,32,1,96,1,10,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,41,131,0,0,1,42,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,45,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,28,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,16,1,45,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,6,1,0,1,20,1,24,1,0,1,4,1,0,1,167,1,167,1,27,1,175,1,6,1,7,1,5,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {32,62,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,177,223,76,126,255,181,241,247,175,97,254,249,53,126,141,223,132,254,255,235,184,63,255,127,253,252,122,244,255,223,255,178,249,253,167,191,134,163,195,59,29,248,175,251,107,252,236,209,129,251,93,133,253,166,191,169,124,247,111,253,26,63,123,253,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,248,243,235,255,26,28,31,78,16,168,153,56,237,143,210,56,237,215,209,255,127,19,113,154,246,83,160,159,223,232,215,16,184,127,157,246,19,180,161,152,177,217,113,109,254,165,161,54,187,191,70,109,218,252,242,161,54,123,191,70,11,220,127,51,109,231,63,191,22,253,31,175,117,63,151,177,86,239,64,139,223,44,242,61,254,142,189,247,99,244,255,39,101,190,156,21,203,11,16,18,177,117,236,125,196,197,177,247,127,67,250,255,217,178,105,179,229,20,16,120,12,175,231,217,44,175,127,141,25,126,7,94,24,47,126,199,187,169,247,238,111,68,95,110,121,147,244,135,209,239,127,145,247,247,136,58,252,182,71,163,63,141,126,255,171,188,191,255,46,250,253,159,243,254,254,247,232,247,255,201,255,254,55,147,159,160,201,142,254,14,250,253,41,250,253,175,131,207,232,255,127,170,254,253,59,209,239,191,29,253,127,30,105,251,152,62,59,240,218,190,161,223,95,210,255,255,170,72,219,159,161,207,222,121,109,255,52,250,253,79,210,118,191,158,252,224,246,255,55,61,102,184,63,3,226,252,218,255,247,255,253,127,253,223,63,249,107,156,188,57,126,242,59,209,159,63,254,107,202,103,248,234,119,146,102,233,239,68,159,149,250,254,175,75,255,182,244,243,15,163,255,255,107,191,134,145,131,95,235,215,248,247,20,230,127,199,159,253,154,244,223,175,247,107,252,114,253,236,215,249,53,241,217,175,69,159,37,76,127,60,146,239,248,107,255,218,95,147,91,255,58,204,3,63,27,143,202,200,95,251,235,16,71,252,154,252,159,247,249,238,192,231,123,253,207,233,227,123,191,255,206,175,241,69,49,173,171,166,58,111,211,173,87,119,210,111,63,127,253,60,21,206,75,79,170,197,170,40,233,151,135,227,189,79,199,15,239,239,141,247,14,246,247,127,141,159,32,146,253,186,191,198,111,250,23,17,136,127,240,215,248,53,254,160,223,195,224,245,187,16,57,105,204,127,16,113,233,159,132,223,19,250,253,215,252,53,126,211,63,73,62,255,53,255,160,95,203,254,254,107,253,65,191,182,182,249,117,127,141,95,251,15,250,117,236,239,191,206,31,244,235,218,223,127,221,63,232,215,179,191,255,122,127,208,175,175,191,83,55,127,210,175,241,27,252,166,127,145,249,253,215,244,126,255,181,232,247,223,128,167,239,215,36,152,255,217,159,132,255,255,250,252,221,175,73,56,253,26,244,25,68,231,55,161,190,255,164,63,137,184,230,47,166,87,184,253,175,201,223,255,42,254,63,218,211,220,19,222,192,29,191,255,6,132,247,255,253,23,253,58,60,229,191,38,125,246,127,243,119,191,238,175,241,213,95,244,235,241,247,191,166,254,141,126,127,19,130,241,159,209,223,95,253,65,210,254,55,161,159,232,235,215,224,207,127,55,106,255,107,253,26,191,62,125,255,171,254,160,39,212,254,215,254,53,126,83,130,253,159,209,24,254,179,191,232,215,98,60,24,55,192,250,139,126,93,254,30,109,255,26,162,3,198,242,107,252,58,242,247,87,132,227,127,246,39,253,218,4,207,244,1,156,126,93,234,7,239,162,143,95,91,251,16,90,252,230,232,227,15,66,123,252,253,107,209,223,24,39,254,78,249,239,95,139,105,67,48,254,34,25,195,175,205,227,193,59,110,76,95,209,103,127,146,210,224,215,199,119,127,145,142,137,241,162,249,86,152,160,205,127,198,99,251,53,117,108,191,6,141,237,215,229,126,126,125,254,238,215,84,184,191,38,191,243,159,113,63,191,38,207,209,111,73,191,255,15,127,210,175,171,239,162,29,250,245,255,254,53,189,254,126,109,197,225,215,52,239,255,6,191,1,211,193,239,251,215,162,190,77,123,180,251,117,248,157,255,236,15,250,77,117,222,240,190,252,254,107,113,95,242,251,175,67,191,255,53,58,118,121,143,198,245,23,253,38,220,135,188,35,191,203,59,242,187,188,243,127,255,223,191,6,63,70,39,253,26,250,252,85,80,4,191,246,255,69,58,169,181,58,233,207,253,53,229,51,180,53,58,233,79,163,207,158,234,251,191,201,175,241,209,175,241,156,126,254,190,244,255,199,60,192,223,132,245,254,83,250,253,205,175,105,114,186,78,215,252,38,12,226,255,255,143,250,16,118,220,191,142,251,234,131,158,203,15,208,133,191,6,235,66,167,7,241,168,78,250,131,126,13,213,121,191,182,167,11,19,150,47,163,11,127,13,226,175,223,84,117,219,111,68,60,106,126,255,141,137,7,205,239,191,9,233,0,243,251,111,74,242,47,191,147,174,34,153,150,223,73,23,253,65,63,102,219,112,191,255,145,129,79,178,198,191,107,191,250,249,175,137,126,245,247,95,11,253,234,239,191,54,250,213,223,127,29,232,96,253,253,215,133,14,214,223,127,61,234,247,215,255,143,68,110,127,83,106,255,159,169,220,138,76,255,6,191,198,87,127,18,190,163,190,84,15,139,222,248,13,160,163,85,7,224,123,232,63,163,219,228,251,191,134,245,218,175,201,48,0,239,55,208,182,255,153,234,101,145,113,244,245,235,115,255,255,153,253,219,244,253,99,212,183,129,247,99,94,127,238,179,219,247,241,27,244,250,248,77,185,143,95,195,246,129,191,187,125,224,51,215,135,208,232,55,160,207,254,111,239,157,255,155,117,56,190,255,49,177,87,220,207,111,66,250,73,254,254,181,248,239,223,212,254,253,235,240,223,191,153,253,251,55,224,191,127,243,95,67,116,235,175,161,99,255,53,21,47,209,91,130,23,62,119,159,9,94,190,45,146,247,240,59,112,252,53,24,62,233,198,255,8,239,254,6,218,31,233,71,254,251,199,236,223,191,14,255,157,208,223,120,23,60,226,236,5,219,7,244,253,39,37,162,247,255,35,161,153,216,52,234,231,63,250,141,127,141,191,230,47,34,155,202,60,242,107,255,26,191,246,127,244,107,115,123,188,203,122,254,15,254,13,21,46,120,210,205,19,116,239,127,246,7,253,70,250,29,120,84,236,135,216,123,250,236,15,250,141,197,237,53,186,157,117,255,175,77,253,253,26,252,221,87,127,49,218,252,186,218,94,63,227,246,191,54,141,7,127,27,141,77,159,5,62,229,31,5,37,243,107,69,124,202,95,235,71,62,101,196,167,220,251,186,122,116,200,167,252,53,88,159,253,250,127,147,167,219,172,158,35,121,178,159,255,90,94,155,95,219,251,253,215,241,126,255,117,189,223,127,61,247,251,70,159,242,137,227,205,191,9,190,218,19,230,71,249,251,215,208,191,127,45,253,27,62,199,111,32,124,14,31,229,111,194,255,161,87,240,55,241,60,203,226,175,45,50,242,55,137,15,42,237,127,109,105,207,255,71,251,95,135,255,102,95,147,120,157,223,53,252,76,99,248,191,249,59,227,131,254,218,218,214,248,140,226,27,74,95,191,142,252,253,55,253,90,252,142,200,61,209,0,122,89,101,71,116,128,241,57,127,29,254,27,126,215,127,246,55,153,247,133,86,248,219,233,18,248,59,191,142,126,246,187,49,190,70,247,99,236,191,29,222,231,62,126,3,238,227,55,87,156,196,231,164,230,76,11,223,231,4,254,138,7,143,65,124,78,231,191,121,62,39,227,165,62,224,31,4,93,234,191,103,116,185,111,19,68,23,99,62,127,115,250,249,215,252,77,242,251,111,129,254,255,166,77,254,166,239,223,250,254,166,135,19,198,244,23,25,159,242,215,82,189,34,191,255,90,127,144,241,41,127,173,142,79,41,254,184,248,148,198,15,149,223,229,29,249,93,222,97,92,127,3,193,167,171,159,126,13,125,126,163,223,138,254,249,181,224,95,254,99,191,182,209,79,255,238,111,34,159,129,137,141,126,250,215,126,19,223,191,252,181,122,254,229,191,245,107,252,200,191,212,92,152,29,247,191,117,227,27,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,124,46,63,32,175,244,95,112,94,233,247,252,61,227,121,165,219,231,231,127,125,206,37,185,124,187,201,207,35,175,104,242,243,4,148,243,243,18,235,35,87,255,159,253,73,255,5,229,86,198,220,223,111,250,55,105,174,226,215,193,119,191,30,229,107,127,147,20,249,131,175,144,211,192,58,194,31,36,127,255,26,127,211,175,135,156,148,228,26,188,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,254,27,104,174,20,121,119,211,215,175,165,125,253,166,94,95,248,236,55,245,250,250,181,20,166,251,92,250,234,127,46,125,253,90,182,175,95,139,251,210,252,239,175,35,57,253,175,254,164,223,204,235,11,159,253,102,94,95,186,118,233,125,46,125,245,63,151,190,204,218,37,114,34,232,203,252,253,235,112,222,87,114,48,242,247,175,197,127,255,186,246,239,95,135,255,254,245,244,111,165,11,255,255,215,231,121,115,107,183,148,19,251,143,240,57,254,54,109,127,93,165,161,25,231,175,171,227,52,184,252,186,63,75,184,252,122,30,46,63,166,109,127,13,15,23,201,119,203,223,242,253,175,197,223,27,220,126,13,233,155,255,150,239,127,29,254,222,224,250,107,8,46,127,146,201,139,97,205,3,235,19,63,38,176,255,33,205,125,253,69,242,247,175,197,127,255,154,246,239,95,135,255,254,181,236,223,191,1,255,253,107,235,184,36,7,230,232,32,121,48,71,7,201,133,9,29,126,55,150,9,201,135,73,78,238,55,248,131,254,11,202,105,42,30,255,145,140,215,173,137,200,120,221,154,8,254,54,107,16,148,127,252,143,164,31,155,99,195,248,121,13,130,254,254,151,240,29,96,203,247,191,193,191,132,245,7,172,67,200,248,101,13,66,251,181,243,168,253,218,121,212,126,237,60,234,248,249,111,146,243,191,8,249,84,93,35,178,107,24,88,111,235,204,155,93,195,192,250,155,208,82,190,251,53,126,13,183,134,129,126,129,47,114,141,191,166,183,134,97,114,148,221,53,140,95,147,233,225,214,48,240,252,104,13,195,251,252,71,107,24,63,90,195,248,209,26,6,247,255,255,134,53,12,60,254,26,198,115,40,33,94,195,248,125,172,126,186,251,107,202,103,248,97,244,211,22,253,177,131,143,127,13,89,195,56,160,159,223,254,53,126,254,174,87,124,136,95,252,155,176,174,114,122,10,79,87,63,125,93,191,248,55,80,27,245,235,48,255,137,126,128,204,224,111,227,11,192,150,226,111,227,19,193,150,254,26,194,179,172,63,228,111,209,9,240,207,228,187,255,91,229,81,252,51,31,246,175,219,129,253,235,222,18,246,175,231,193,254,49,129,253,15,169,191,101,125,32,252,237,251,64,234,111,89,31,72,253,43,237,75,252,51,31,183,95,179,131,219,175,169,184,65,239,24,25,23,59,254,27,64,118,172,15,4,153,241,125,32,252,237,251,64,248,219,247,129,140,222,24,242,129,0,251,54,62,208,175,161,248,107,191,252,183,239,3,253,26,138,191,142,159,255,254,166,125,32,232,21,224,11,93,229,251,64,191,38,243,152,223,190,239,3,253,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps1nc.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps1nc.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps1nc.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps1nc.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps1nc.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps2nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	internal sealed class ps2nc : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'ps2nc' shader</summary>
		public ps2nc()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps2nc.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps2nc.cid0 = state.GetNameUniqueID("v_SH");
			ps2nc.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps2nc.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps2nc.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps2nc.cid4 = state.GetNameUniqueID("p_lights");
			ps2nc.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps2nc.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps2nc.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps2nc.tid0 = state.GetNameUniqueID("CustomTexture");
			ps2nc.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps2nc.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps2nc.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps2nc.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps2nc.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps2nc.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps2nc.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps2nc.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps2nc.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps2nc.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps2nc.fx, ps2nc.fxb, 48, 67);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 6;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2nc.vin[i]));
			index = ps2nc.vin[(i + 6)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[7] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[6] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 6)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,4,5,0,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[8];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,240,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,168,135,0,0,1,8,131,0,0,1,4,131,0,0,1,1,229,0,0,158,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,220,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,144,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,36,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,180,1,0,1,0,1,1,1,208,138,0,0,1,15,1,92,1,0,1,0,1,15,1,120,138,0,0,1,15,1,196,1,0,1,0,1,15,1,216,138,0,0,1,15,1,232,1,0,1,0,1,15,1,252,138,0,0,1,16,1,12,1,0,1,0,1,16,1,32,138,0,0,1,16,1,228,135,0,0,1,3,1,0,1,0,1,16,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,52,1,0,1,0,1,16,1,48,131,0,0,1,93,134,0,0,1,16,1,76,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,104,1,0,1,0,1,16,1,100,131,0,0,1,93,134,0,0,1,16,1,128,1,0,1,0,1,16,1,124,1,0,1,0,1,16,1,212,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,168,1,0,1,0,1,16,1,164,131,0,0,1,93,134,0,0,1,16,1,192,1,0,1,0,1,16,1,188,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,76,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,144,1,0,1,0,1,2,1,188,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,124,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,10,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,112,1,10,1,0,1,0,1,96,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,46,131,0,0,1,47,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,38,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,64,1,12,1,18,1,3,1,18,1,0,1,240,1,85,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,64,1,48,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,160,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,10,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,9,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,5,1,3,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,8,1,0,1,177,1,180,1,0,1,225,1,6,1,10,1,0,1,200,1,7,1,0,1,5,1,0,1,177,1,180,1,0,1,225,1,2,1,10,1,0,1,200,1,7,1,0,1,10,1,0,1,177,1,180,1,0,1,225,1,1,1,10,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,9,1,10,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,2,1,9,1,5,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,9,1,8,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,6,1,3,1,6,1,200,1,7,1,0,1,6,1,0,1,27,1,192,1,180,1,235,1,2,1,3,1,5,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,1,1,3,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,88,1,33,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,6,1,6,1,128,1,88,1,33,1,1,1,0,1,0,1,190,1,190,1,108,1,240,1,2,1,2,1,129,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,177,1,0,1,225,1,6,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,236,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,200,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,113,1,0,1,11,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,8,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,112,1,12,1,0,1,0,1,96,1,13,1,0,1,0,1,16,1,14,1,0,1,32,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,76,131,0,0,1,77,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,67,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,73,1,0,1,0,1,16,1,65,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,32,1,14,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,16,1,40,1,18,1,0,1,18,135,0,0,1,96,1,41,1,196,1,0,1,18,133,0,0,1,96,1,47,1,96,1,53,1,18,1,0,1,18,133,0,0,1,96,1,59,1,96,1,65,1,18,1,0,1,18,133,0,0,1,96,1,71,1,80,1,77,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,160,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,11,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,11,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,9,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,9,1,15,1,0,1,92,1,15,1,0,1,8,1,160,1,27,1,136,1,177,1,161,1,9,1,16,1,11,1,200,1,15,1,0,1,8,1,160,1,198,1,136,1,0,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,9,1,14,1,3,1,92,1,2,1,0,1,11,1,0,131,27,0,1,161,1,1,1,0,1,11,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,9,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,177,1,52,1,148,1,171,1,9,1,16,1,8,1,92,1,8,1,0,1,11,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,11,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,9,1,160,1,108,1,208,1,148,1,171,1,9,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,9,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,11,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,11,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,11,1,11,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,9,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,9,1,10,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,10,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,10,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,9,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,5,1,6,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,20,1,0,1,0,1,2,1,116,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,52,1,0,1,113,1,0,1,6,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,6,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,32,1,96,1,10,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,41,131,0,0,1,42,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,45,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,28,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,16,1,45,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,6,1,0,1,20,1,24,1,0,1,4,1,0,1,167,1,167,1,27,1,175,1,6,1,7,1,5,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {60,66,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,249,111,38,191,255,218,248,251,215,48,255,252,26,191,198,111,66,255,255,117,220,159,255,191,126,126,61,250,255,239,127,217,252,254,211,95,195,209,225,175,210,129,255,6,191,198,255,123,232,192,120,174,66,60,95,254,166,242,221,191,245,107,252,191,7,207,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,249,242,252,250,191,6,199,147,19,4,106,38,78,251,187,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,191,167,253,4,109,40,102,108,118,92,155,95,227,55,27,104,179,251,107,212,166,205,239,54,212,102,239,215,104,129,59,190,254,117,228,43,251,252,90,244,127,116,223,253,92,198,90,189,3,45,126,179,200,247,248,59,246,222,143,209,255,159,148,249,114,86,44,47,240,229,175,59,240,62,226,226,216,251,191,33,253,255,108,217,180,217,114,10,8,60,134,215,243,108,150,215,242,59,240,194,120,241,59,222,77,189,119,127,35,250,114,203,155,164,191,141,126,255,151,188,191,127,95,234,240,157,71,235,127,140,126,255,183,188,191,255,43,250,253,255,240,254,254,141,126,51,130,255,155,121,223,235,239,160,201,31,160,191,131,126,127,138,126,191,79,159,237,208,255,255,84,253,251,57,253,254,109,250,255,159,21,105,91,210,103,115,175,237,31,70,191,255,65,244,255,127,43,210,246,175,163,207,254,42,175,237,63,70,191,255,67,218,238,215,147,31,220,254,255,166,199,12,247,247,198,23,191,246,255,253,127,255,95,255,247,228,215,56,121,115,252,228,119,162,63,95,255,154,242,25,232,246,59,73,179,244,57,125,86,234,251,191,1,253,219,210,207,63,140,254,255,235,252,154,70,14,126,45,166,43,158,223,137,63,251,53,233,191,95,239,215,248,221,244,179,125,254,236,215,162,207,146,95,227,177,126,38,249,142,191,246,175,253,53,185,245,175,195,249,152,255,55,60,42,83,127,237,175,67,28,244,107,242,127,222,231,187,3,159,239,245,63,167,143,239,253,254,59,191,198,23,197,180,174,154,234,188,77,183,94,221,73,191,253,252,245,243,84,56,53,61,169,22,171,162,164,95,30,142,247,62,29,63,188,191,55,222,59,216,223,255,53,126,130,196,225,55,248,53,126,211,191,136,64,252,131,14,171,223,243,247,196,231,63,38,159,255,65,244,63,124,247,15,209,231,255,16,62,79,228,243,95,195,255,124,135,197,234,55,253,159,126,45,249,194,62,191,11,77,227,175,203,48,126,253,63,9,191,39,244,251,175,249,107,252,166,127,146,124,254,107,254,65,191,150,253,253,215,250,131,126,109,109,243,235,254,26,191,246,31,244,235,216,223,127,157,63,232,215,181,191,255,186,127,208,175,103,127,255,245,254,160,95,95,127,167,110,254,164,95,227,55,248,77,255,34,243,251,175,233,253,254,107,209,239,79,152,109,126,83,234,235,63,163,239,254,179,191,232,215,226,191,127,125,194,233,63,251,131,126,131,95,227,215,248,139,8,191,95,251,215,228,191,191,34,248,255,217,159,244,235,48,171,225,239,95,131,250,160,119,168,221,175,195,162,141,207,254,26,194,71,62,251,221,168,143,95,211,193,33,152,191,38,181,195,251,255,217,159,244,235,115,255,191,38,195,160,57,250,181,126,45,105,247,39,225,119,26,39,181,255,107,254,162,95,147,219,252,90,252,251,47,100,53,242,159,253,79,191,46,195,249,117,24,151,223,224,215,248,191,25,215,95,135,112,71,191,63,246,107,252,103,252,14,104,130,119,126,111,106,248,235,209,119,132,216,31,71,239,210,56,254,154,63,200,125,246,213,31,71,56,254,69,52,30,239,179,191,230,143,251,181,188,207,126,29,254,236,255,254,227,126,109,253,12,125,253,122,218,87,66,159,161,205,175,79,127,147,216,50,44,3,95,62,251,138,97,253,250,10,75,62,251,107,24,86,248,217,255,253,199,253,58,222,103,191,174,194,251,181,60,120,191,174,194,251,181,249,51,191,221,95,195,239,134,159,253,223,127,220,175,171,159,97,78,136,79,136,111,64,243,255,251,15,254,117,236,60,252,58,152,7,254,255,175,207,115,244,27,232,188,129,150,191,62,127,254,107,254,26,255,55,191,255,235,201,223,127,18,230,9,159,99,78,127,3,250,236,215,83,88,191,206,175,241,155,107,123,249,251,215,252,53,126,59,250,41,127,11,79,128,63,255,111,157,159,175,254,226,148,223,249,181,24,254,175,79,255,255,245,120,142,127,29,175,255,95,155,225,225,111,188,12,94,248,245,25,214,87,24,7,127,6,94,209,241,129,103,121,94,192,39,224,9,244,241,241,175,33,29,255,26,50,118,250,252,255,230,118,79,24,63,225,243,95,131,248,28,127,255,90,250,247,175,245,27,8,239,252,218,191,198,111,73,127,255,15,127,146,161,5,198,129,255,59,25,16,186,9,31,254,166,4,255,43,251,61,254,254,53,164,253,159,100,250,39,58,253,69,191,54,203,183,147,17,224,66,99,250,139,240,217,111,202,244,23,57,144,223,101,28,242,187,163,203,175,161,184,208,252,254,69,191,9,104,246,27,200,59,242,187,188,35,191,203,59,44,59,191,1,230,245,255,254,131,254,239,255,251,215,224,199,216,155,95,67,159,191,10,134,254,215,254,191,200,222,180,214,222,252,185,191,166,124,134,182,191,147,52,75,255,52,250,236,169,190,255,155,252,26,31,253,26,207,233,231,239,75,255,127,204,157,252,38,24,212,175,241,148,126,127,243,107,154,252,190,179,35,191,9,131,248,255,255,163,254,161,29,247,175,227,190,250,160,231,242,3,236,214,175,193,118,232,15,250,61,124,120,170,247,255,160,95,67,237,10,120,211,216,155,132,229,201,216,155,95,131,120,251,55,85,251,241,27,17,239,154,223,127,99,226,71,243,251,111,66,252,104,126,255,77,137,167,229,119,210,41,164,3,228,119,146,111,146,73,211,134,251,253,143,12,124,146,39,254,93,251,213,207,127,77,244,171,191,255,90,232,87,127,255,181,209,175,254,254,235,192,206,233,239,191,46,236,156,254,254,235,81,191,191,254,127,36,118,227,55,101,59,228,203,237,111,240,107,124,197,246,5,50,255,235,168,140,226,187,223,0,118,80,229,92,116,0,244,168,255,253,95,243,39,253,218,250,253,111,192,240,126,3,171,23,140,254,132,62,67,95,191,62,247,255,159,217,191,77,223,164,151,44,188,31,243,250,115,159,221,190,143,223,160,215,135,232,157,95,195,246,129,191,187,125,224,51,215,135,208,232,55,160,207,254,111,239,29,232,100,177,221,63,38,246,154,251,249,77,72,87,201,223,191,22,255,253,155,218,191,127,29,254,251,55,179,127,255,6,252,247,111,206,246,199,249,16,191,166,226,37,58,76,240,242,245,225,175,169,120,225,179,223,237,215,176,190,0,227,248,107,49,142,191,6,195,39,61,249,31,225,221,223,64,251,35,93,201,127,255,152,253,251,215,225,191,97,155,241,46,120,4,127,27,92,88,207,211,255,19,214,251,191,254,127,36,52,19,255,134,250,249,143,126,99,242,25,126,45,162,135,240,192,175,253,31,253,218,220,94,244,58,141,235,15,254,13,21,46,120,210,205,19,244,240,127,246,7,253,70,214,247,248,77,25,174,188,247,107,98,12,127,208,111,76,125,224,59,213,243,127,17,198,253,107,83,127,191,6,127,247,213,95,140,54,191,174,182,215,207,184,253,175,77,227,193,223,70,99,211,103,65,188,0,230,254,53,126,173,72,188,240,107,253,40,94,248,6,226,133,189,219,234,221,225,120,193,233,94,167,255,126,253,191,201,211,133,86,47,146,252,217,207,127,45,175,205,175,237,253,254,235,120,191,255,186,222,239,191,158,251,253,86,126,62,241,238,223,4,63,255,9,243,175,252,237,251,67,248,27,254,144,240,176,209,157,34,39,191,54,255,253,21,116,235,223,36,124,140,191,129,195,127,246,55,25,255,204,196,1,191,142,126,6,153,254,181,21,206,239,198,248,176,95,198,239,255,58,34,151,212,238,255,254,139,225,223,254,6,34,139,120,151,255,255,235,243,187,191,1,181,249,191,89,31,16,167,65,143,179,12,161,221,175,203,49,0,124,85,241,37,127,45,109,139,239,137,70,12,227,215,102,255,83,244,128,241,111,241,217,111,192,127,255,230,250,183,224,6,127,23,190,229,111,192,99,253,237,216,207,197,119,233,175,33,126,235,175,45,125,253,69,2,235,215,214,190,4,182,244,247,21,254,102,252,126,61,29,27,73,237,95,252,107,120,99,3,76,252,223,31,155,25,207,175,181,97,60,234,79,6,227,249,245,188,207,126,3,254,251,55,183,56,99,60,191,190,155,63,194,239,183,99,95,218,140,231,215,163,241,192,55,255,53,117,60,191,134,142,7,239,155,185,69,92,163,243,109,113,248,181,248,179,95,3,112,255,38,243,217,175,43,99,230,190,204,103,198,247,54,184,42,60,254,191,111,27,197,38,129,47,126,115,250,249,215,252,77,242,251,111,1,188,254,38,99,223,126,77,134,245,149,190,103,254,14,253,108,224,100,236,93,204,207,254,181,84,191,202,239,191,214,31,100,252,236,95,171,227,103,227,61,227,103,27,223,92,126,151,119,228,119,121,135,113,253,13,4,159,174,158,254,53,244,249,141,126,43,250,231,215,130,159,253,143,253,218,70,79,255,187,191,137,124,6,225,252,157,164,89,250,175,253,38,190,159,253,107,245,252,236,127,235,215,248,145,159,173,249,94,59,238,127,235,198,55,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,249,92,126,64,190,236,191,224,124,217,239,249,123,198,243,101,183,95,167,248,245,57,71,230,214,29,204,58,5,242,171,102,157,130,128,242,58,133,89,175,67,190,251,191,160,220,214,152,251,251,77,255,38,205,85,252,58,248,142,214,92,255,164,223,36,229,252,7,242,28,88,79,249,131,228,239,95,227,111,250,245,144,107,147,92,131,247,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,127,131,95,67,114,198,178,166,42,125,253,90,218,215,111,234,245,133,207,126,83,175,175,95,75,97,186,207,165,175,254,231,210,215,175,101,251,250,181,184,47,205,131,255,58,178,182,241,213,159,244,155,121,125,225,179,223,204,235,75,243,120,222,231,210,87,255,115,233,235,215,182,125,241,186,178,253,251,215,225,252,55,231,241,254,34,249,251,215,226,191,127,93,251,247,175,195,127,255,122,250,183,210,133,255,255,235,243,188,73,254,92,115,107,255,145,172,51,255,26,218,215,175,9,56,30,77,127,45,254,219,141,251,215,225,191,127,54,112,249,245,60,92,126,76,219,254,26,30,46,146,247,151,191,229,251,95,139,191,55,184,253,26,210,55,255,45,223,255,58,252,189,193,245,215,16,92,254,36,147,23,147,245,249,255,251,79,250,49,129,253,15,105,238,235,47,146,191,127,45,254,251,215,180,127,255,58,252,247,175,101,255,254,13,248,111,151,91,101,92,45,29,36,15,230,232,32,185,48,161,195,239,198,50,33,249,48,201,201,253,6,127,208,127,65,185,87,197,227,63,146,241,186,181,33,25,175,91,27,194,223,102,45,134,242,174,255,145,244,99,115,108,24,63,175,197,208,223,255,18,190,3,108,249,254,55,248,151,176,14,131,245,24,25,191,172,197,104,191,118,30,181,95,59,143,218,175,157,71,29,63,255,141,60,32,242,217,186,86,102,215,114,176,238,216,153,55,187,150,131,117,72,161,165,124,247,107,252,26,110,45,7,253,254,23,154,135,166,249,249,143,228,187,175,254,98,147,163,236,174,229,252,154,76,15,183,150,131,231,71,107,57,155,159,31,173,229,252,104,45,231,71,107,57,63,90,203,249,185,92,203,193,227,175,229,60,39,108,100,45,231,247,177,122,250,238,175,41,159,225,199,239,36,205,210,45,250,99,7,31,255,26,178,150,115,64,63,191,253,107,252,252,93,183,249,144,248,224,55,97,29,236,244,47,158,174,222,253,186,241,193,111,160,182,250,215,97,254,19,185,254,53,212,103,54,62,17,124,10,252,109,124,67,248,20,191,134,240,44,203,189,252,253,127,27,189,241,31,201,119,34,195,128,253,235,118,96,255,186,29,216,191,238,45,97,255,122,30,236,31,19,216,255,16,228,198,247,5,241,183,239,11,226,111,223,23,196,223,70,55,27,63,213,199,237,215,236,224,246,107,42,110,208,63,70,198,127,77,254,253,55,128,236,88,95,16,50,227,251,130,248,219,247,5,241,183,239,11,26,189,49,228,11,2,246,109,124,193,95,67,241,215,126,249,111,223,23,252,53,20,127,29,63,255,253,77,251,130,208,43,192,23,186,202,247,5,127,77,230,49,191,125,223,23,252,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps2nc.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps2nc.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps2nc.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps2nc.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps2nc.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
}
