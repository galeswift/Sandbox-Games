// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = shader.fx
// Namespace = Tutorials.Tutorial_16

namespace Tutorials.Tutorial_16.Shader
{
	
	/// <summary><para>Technique 'Tutorial16' generated from file 'shader.fx'</para><para>Vertex Shader: approximately 4 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class Tutorial16 : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'Tutorial16' shader</summary>
		public Tutorial16()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			Tutorial16.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			Tutorial16.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector4>("colour");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != Tutorial16.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'colour'
			this.preg_change = (this.preg_change | state.SetGlobalVector4(ref this.preg[0], Tutorial16.gid0, ref this.gc0));
			if ((this.vreg_change == true))
			{
				Tutorial16.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				Tutorial16.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(Tutorial16.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					Tutorial16.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref Tutorial16.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((Tutorial16.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((Tutorial16.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			Tutorial16.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out Tutorial16.fx, Tutorial16.fxb, 5, 1);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.preg_change);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(Tutorial16.vin[i]));
			index = Tutorial16.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float4 colour'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float4 colour'</summary>
		private int gc0;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,116,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,4,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,15,1,104,135,0,0,1,3,1,0,1,0,1,14,1,228,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,184,1,0,1,0,1,14,1,180,131,0,0,1,93,134,0,0,1,14,1,208,1,0,1,0,1,14,1,204,1,0,1,0,1,15,1,24,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,236,1,0,1,0,1,14,1,232,131,0,0,1,93,134,0,0,1,15,1,4,1,0,1,0,1,15,131,0,0,1,15,1,88,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,44,1,0,1,0,1,15,1,40,131,0,0,1,93,134,0,0,1,15,1,68,1,0,1,0,1,15,1,64,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,2,132,255,0,138,0,0,1,1,1,204,1,16,1,42,1,17,1,1,1,0,1,0,1,1,132,0,0,1,204,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,204,1,0,1,1,1,0,1,4,143,0,0,1,1,131,0,0,1,5,134,0,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,14,1,0,1,6,1,0,1,63,1,0,1,7,1,241,1,85,1,80,1,3,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,8,1,32,1,14,1,18,1,0,1,18,136,0,0,1,3,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,2,1,0,1,0,1,200,1,15,131,0,0,1,198,1,0,1,0,1,235,1,2,1,4,1,0,1,200,1,15,131,0,0,1,177,1,148,1,148,1,235,1,2,1,3,1,0,1,200,1,15,131,0,0,1,108,1,248,1,148,1,235,1,2,1,1,1,0,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,7,148,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,1,132,255,0,138,0,0,1,16,1,164,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,204,1,0,1,0,1,1,1,216,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,152,1,0,1,1,1,0,1,6,143,0,0,1,1,131,0,0,1,3,134,0,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,16,1,6,1,0,1,48,1,32,1,7,176,0,0,1,64,1,64,142,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,8,1,96,1,14,1,18,1,0,1,18,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,16,1,32,1,0,1,0,1,18,1,0,1,196,134,0,0,1,5,1,0,1,0,1,34,133,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,6,1,0,1,0,1,108,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,3,1,2,1,6,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,4,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,6,1,200,1,15,1,0,1,4,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,4,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,0,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,0,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,3,1,0,1,6,1,200,1,15,1,0,1,0,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,0,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,4,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,4,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,3,1,1,1,6,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,4,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,0,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,0,1,3,1,0,1,200,1,4,131,0,0,1,170,1,167,1,0,1,239,1,5,1,3,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,195,1,190,1,0,1,176,1,0,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,195,1,190,1,0,1,176,1,0,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,0,1,3,1,168,1,36,1,1,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,149,0,0,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,151,0,0,132,255,0,138,0,0,1,1,1,92,1,16,1,42,1,17,1,1,131,0,0,1,240,131,0,0,1,108,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,108,1,0,1,1,145,0,0,1,1,131,0,0,1,1,134,0,0,1,2,1,144,131,0,0,1,3,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,4,1,0,1,0,1,18,1,0,1,196,134,0,0,1,3,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,131,0,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,3,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {76,38,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,222,253,166,242,251,175,141,191,233,255,127,128,126,247,235,232,255,127,77,253,251,67,158,95,143,254,255,251,95,54,191,255,244,215,112,253,252,89,250,29,126,31,234,135,223,91,225,189,7,246,189,223,243,55,145,239,254,173,13,239,253,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,159,157,231,215,255,53,56,190,155,32,192,51,113,218,95,165,113,218,55,25,71,106,63,5,250,1,188,223,236,215,16,216,254,243,107,209,255,17,210,118,63,55,253,3,191,223,44,242,61,254,142,189,247,99,244,255,39,101,190,156,21,203,11,252,253,235,254,26,241,247,17,171,198,222,255,13,233,255,103,203,166,205,150,83,134,128,49,188,158,103,179,188,118,116,65,31,248,28,127,167,222,187,37,253,255,143,242,254,254,203,232,255,255,144,247,247,115,162,241,92,233,204,237,189,88,254,63,211,207,65,143,63,69,191,255,187,232,179,191,141,254,255,167,234,223,255,18,253,254,207,209,255,127,39,125,207,111,251,63,209,231,255,157,215,246,55,160,54,191,14,253,255,247,141,180,221,161,207,70,191,169,107,251,109,250,253,169,182,251,245,228,7,183,255,191,233,49,243,240,215,225,159,95,251,255,254,191,255,175,255,251,119,255,53,78,222,28,63,249,157,232,207,223,95,63,67,27,252,77,79,250,123,3,190,190,255,107,210,191,7,128,255,107,152,188,192,95,251,215,254,154,52,218,95,147,40,55,196,95,212,236,222,239,191,243,107,124,81,76,235,170,169,206,219,116,235,213,157,244,219,207,95,63,79,101,22,210,147,106,177,42,74,250,229,225,120,239,211,241,195,251,123,227,189,131,253,125,192,251,181,104,208,127,16,81,242,47,250,191,255,111,129,101,198,96,96,255,77,232,244,215,254,191,104,12,187,118,12,127,226,175,33,159,249,99,248,163,126,13,51,134,95,135,231,248,224,215,208,49,8,47,219,49,116,121,231,235,62,151,95,115,204,191,11,15,241,55,250,131,136,147,255,36,249,253,55,254,131,126,77,251,251,111,242,7,253,90,246,247,223,244,15,250,181,237,239,191,198,31,244,235,120,191,211,119,255,209,175,169,109,126,157,95,227,63,251,147,72,94,126,109,130,65,159,127,69,176,254,179,63,137,198,248,235,200,223,104,251,159,253,73,244,217,31,228,62,251,107,168,15,247,217,175,193,159,253,223,212,151,124,246,99,204,218,191,230,127,244,107,240,247,255,217,95,36,127,255,90,252,247,175,107,255,254,117,248,239,95,207,254,253,27,240,223,191,190,55,143,152,155,30,47,254,90,17,94,252,181,190,113,94,220,251,58,243,18,227,69,51,6,3,123,246,155,209,63,191,22,120,241,207,251,181,205,24,14,127,19,249,12,248,154,49,236,211,103,79,127,13,25,195,175,67,255,62,167,159,191,47,253,255,207,227,207,126,29,206,171,65,207,252,109,191,134,201,217,185,113,125,83,252,169,182,194,194,253,183,110,124,227,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,55,61,63,250,254,71,207,251,60,151,95,51,62,253,9,74,139,253,123,191,198,111,250,23,253,26,191,198,239,249,123,250,240,188,156,0,231,7,40,102,181,249,4,250,130,243,9,191,46,199,232,191,41,199,253,255,222,175,241,107,252,69,99,201,29,252,77,18,211,75,14,224,215,252,53,190,250,147,126,157,244,63,35,248,95,253,77,191,14,167,224,40,183,192,127,115,10,230,79,146,124,128,255,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,53,151,240,7,33,7,97,250,250,53,181,175,95,215,235,11,159,253,186,94,95,154,155,240,62,151,190,250,159,75,95,46,111,241,107,113,95,191,102,167,175,95,175,211,215,175,55,208,215,175,55,208,215,175,23,237,235,215,177,125,73,46,230,55,160,191,255,239,63,73,199,252,15,97,188,200,37,40,94,252,247,175,233,242,39,252,247,175,229,242,39,252,247,175,237,229,30,240,252,127,61,127,130,199,207,159,252,78,232,244,215,138,228,242,126,173,161,92,158,228,79,14,126,13,155,203,251,89,201,149,124,93,153,244,101,207,155,247,63,169,51,239,127,82,103,222,255,164,206,188,255,73,102,222,255,159,0,0,0,255,255};
			}
		}
#endif
	}
}
