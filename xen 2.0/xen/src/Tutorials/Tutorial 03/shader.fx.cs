// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = shader.fx
// Namespace = Tutorials.Tutorial_03

namespace Tutorials.Tutorial_03.Shader
{
	
	/// <summary><para>Technique 'Tutorial03Technique' generated from file 'shader.fx'</para><para>Vertex Shader: approximately 6 instruction slots used, 5 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class Tutorial03Technique : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'Tutorial03Technique' shader</summary>
		public Tutorial03Technique()
		{
			this.vreg[4] = new Microsoft.Xna.Framework.Vector4(1F, 0F, 0F, 0F);
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			Tutorial03Technique.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			Tutorial03Technique.cid0 = state.GetNameUniqueID("scale");
			Tutorial03Technique.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector4>("colour");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != Tutorial03Technique.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'colour'
			this.preg_change = (this.preg_change | state.SetGlobalVector4(ref this.preg[0], Tutorial03Technique.gid0, ref this.gc0));
			if ((this.vreg_change == true))
			{
				Tutorial03Technique.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				Tutorial03Technique.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(Tutorial03Technique.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					Tutorial03Technique.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref Tutorial03Technique.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((Tutorial03Technique.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((Tutorial03Technique.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			Tutorial03Technique.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out Tutorial03Technique.fx, Tutorial03Technique.fxb, 7, 1);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.preg_change);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(Tutorial03Technique.vin[i]));
			index = Tutorial03Technique.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'scale'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'float scale'</summary>
		public float Scale
		{
			set
			{
				this.vreg[4] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.vreg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float4 colour'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float4 colour'</summary>
		private int gc0;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,132,135,0,1,3,131,0,1,1,131,0,1,112,135,0,1,5,131,0,1,4,131,0,1,1,211,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,131,0,0,1,168,135,0,0,1,1,131,0,0,1,4,131,0,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,4,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,124,131,0,0,1,152,139,0,0,1,180,131,0,0,1,208,138,0,0,1,14,1,92,1,0,1,0,1,14,1,120,138,0,0,1,15,1,120,135,0,0,1,3,1,0,1,0,1,14,1,244,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,200,1,0,1,0,1,14,1,196,131,0,0,1,93,134,0,0,1,14,1,224,1,0,1,0,1,14,1,220,1,0,1,0,1,15,1,40,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,252,1,0,1,0,1,14,1,248,131,0,0,1,93,134,0,0,1,15,1,20,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,104,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,60,1,0,1,0,1,15,1,56,131,0,0,1,93,134,0,0,1,15,1,84,1,0,1,0,1,15,1,80,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,2,132,255,0,138,0,0,1,2,1,84,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,124,131,0,0,1,216,135,0,0,1,36,134,0,0,1,1,1,64,138,0,0,1,1,1,24,131,0,0,1,28,1,0,1,0,1,1,1,11,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,4,131,0,0,1,68,1,0,1,2,131,0,0,1,5,133,0,0,1,76,131,0,0,1,92,131,0,0,1,172,1,0,1,2,1,0,1,5,1,0,1,4,133,0,0,1,180,131,0,0,1,196,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,216,1,0,1,1,1,0,1,4,143,0,0,1,1,131,0,0,1,5,134,0,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,14,1,0,1,6,1,0,1,63,1,0,1,7,1,241,1,85,1,80,1,3,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,8,1,48,1,14,1,18,1,0,1,18,136,0,0,1,3,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,4,1,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,2,1,0,1,0,1,200,1,15,131,0,0,1,198,1,136,1,136,1,235,1,2,1,4,1,0,1,200,1,15,131,0,0,1,177,1,52,1,148,1,235,1,2,1,3,1,0,1,200,1,15,131,0,0,1,108,1,208,1,148,1,235,1,2,1,1,1,0,1,200,1,1,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,0,1,5,1,0,1,200,1,2,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,4,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,0,1,7,1,0,1,200,1,8,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,0,1,8,148,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,1,132,255,0,138,0,0,1,16,1,204,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,220,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,128,1,0,1,0,1,14,1,168,138,0,0,1,14,1,88,131,0,0,1,28,1,0,1,0,1,14,1,75,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,68,131,0,0,1,68,1,0,1,2,131,0,0,1,5,133,0,0,1,76,131,0,0,1,92,131,0,0,1,172,1,0,1,2,1,0,1,5,1,0,1,216,133,0,0,1,180,131,0,0,1,196,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,143,0,0,1,1,131,0,0,1,3,134,0,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,16,1,6,1,0,1,48,1,32,1,7,176,0,0,1,64,1,64,142,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,8,1,96,1,14,1,18,1,0,1,18,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,48,1,32,1,0,1,0,1,18,1,0,1,196,134,0,0,1,5,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,0,1,255,1,0,1,92,1,2,1,0,1,2,1,0,131,27,0,1,161,1,1,1,0,1,7,1,200,1,15,1,0,1,0,1,160,1,27,1,52,1,0,1,161,1,6,1,6,1,0,1,20,1,143,1,5,1,4,1,160,1,27,1,52,1,27,1,161,1,6,1,5,1,1,1,92,1,15,1,0,1,3,1,160,1,27,1,52,1,198,1,161,1,6,1,7,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,52,1,0,1,171,1,6,1,7,1,3,1,200,1,15,1,0,1,4,1,160,1,198,1,52,1,0,1,171,1,6,1,5,1,4,1,200,1,15,1,0,1,0,1,160,1,198,1,52,1,0,1,171,1,6,1,6,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,1,1,1,1,7,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,0,1,171,1,6,1,6,1,0,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,0,1,171,1,6,1,5,1,4,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,0,1,171,1,6,1,7,1,3,1,92,1,7,1,0,1,5,1,0,1,192,1,108,1,108,1,161,1,1,1,4,1,7,1,200,1,15,1,0,1,3,1,160,1,108,1,52,1,0,1,171,1,6,1,7,1,3,1,200,1,15,1,0,1,4,1,160,1,108,1,52,1,0,1,171,1,6,1,5,1,4,1,200,1,15,1,0,1,0,1,160,1,108,1,52,1,0,1,171,1,6,1,6,1,0,1,200,1,4,131,0,0,1,62,1,13,1,0,1,239,1,5,1,0,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,205,1,0,1,240,1,5,1,4,1,0,1,20,1,4,1,0,1,2,1,0,1,190,1,205,1,27,1,240,1,5,1,3,1,4,1,12,1,18,131,0,0,131,27,0,1,225,1,3,1,1,1,1,1,200,1,10,131,0,0,1,204,1,188,1,0,1,224,1,2,1,0,1,0,1,20,1,17,1,0,1,1,1,0,1,195,1,190,1,27,1,176,1,0,1,2,1,1,1,168,1,36,1,1,1,1,1,0,1,195,1,190,1,0,1,144,1,0,1,3,1,2,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,0,1,1,1,168,1,132,1,1,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,1,1,1,149,0,0,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,151,0,0,132,255,0,138,0,0,1,1,1,156,1,16,1,42,1,17,1,1,1,0,1,0,1,1,132,0,0,1,156,135,0,0,1,36,135,0,0,1,212,139,0,0,1,172,131,0,0,1,28,131,0,0,1,159,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,152,131,0,0,1,48,1,0,1,2,131,0,0,1,5,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,156,1,0,1,1,1,0,1,2,143,0,0,1,1,131,0,0,1,1,134,0,0,1,2,1,144,131,0,0,1,3,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,4,1,32,1,10,1,18,1,0,1,18,136,0,0,1,3,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,4,1,200,132,0,0,1,20,1,24,1,0,1,1,1,0,1,198,1,27,1,198,1,161,131,2,0,1,168,1,46,1,1,1,0,1,0,1,60,1,108,1,0,1,129,1,2,1,4,1,3,1,20,1,17,1,0,1,1,1,0,1,195,1,190,1,198,1,176,1,0,1,3,1,2,1,168,1,36,1,2,1,1,1,0,1,195,1,190,1,0,1,144,1,0,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,198,1,176,1,0,1,0,1,2,1,168,1,132,1,2,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,1,1,1,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {64,39,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,168,223,84,126,255,181,241,55,253,127,165,223,253,186,244,255,95,71,63,251,166,159,95,143,254,255,251,95,54,191,255,244,215,112,253,254,85,250,29,126,31,234,151,223,91,133,239,189,252,77,228,187,127,107,195,123,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,103,231,249,245,127,13,142,239,38,8,212,76,156,246,119,105,156,246,235,232,255,191,137,56,77,251,41,208,15,224,253,102,191,134,192,246,159,95,139,254,143,16,183,251,185,233,31,248,253,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,224,111,196,201,191,89,164,29,98,213,216,251,191,33,253,255,108,217,180,217,114,202,16,48,134,215,243,108,150,215,142,46,232,3,159,227,239,212,123,247,103,232,255,127,150,247,247,223,70,255,255,151,188,191,127,95,162,241,59,165,51,183,247,98,251,95,174,159,131,30,127,138,126,255,79,209,103,255,24,253,255,79,213,191,255,35,250,253,223,163,255,143,244,61,191,45,6,243,127,120,109,127,59,250,251,183,162,255,151,145,182,191,39,125,246,248,55,117,109,127,111,250,253,141,182,251,245,228,7,183,255,191,233,49,243,240,215,225,159,95,251,255,254,191,255,175,255,251,119,255,53,78,222,28,63,249,157,232,207,223,95,63,67,27,252,77,79,250,123,211,63,59,250,254,175,73,255,30,208,207,111,255,26,38,47,240,215,254,181,191,38,141,246,215,36,202,13,241,23,53,187,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,153,133,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,31,240,126,173,95,227,55,248,77,255,160,95,227,215,248,207,254,162,255,251,255,22,88,102,12,6,246,99,124,240,107,255,95,52,134,151,118,12,191,225,175,41,159,225,43,51,134,95,135,62,123,170,239,255,186,191,198,111,241,107,60,167,159,191,239,175,33,52,248,181,232,19,204,59,230,246,31,251,53,76,158,196,141,11,252,246,179,241,168,28,217,126,186,124,251,117,159,203,175,73,239,223,133,201,243,27,253,65,196,120,127,146,252,254,27,255,65,191,166,253,253,55,249,131,126,45,251,251,111,250,7,253,218,246,247,95,227,15,250,117,188,223,233,187,255,232,215,101,246,255,245,233,243,95,227,47,250,117,126,141,255,236,79,194,223,4,135,190,251,138,224,253,103,127,18,125,254,235,200,223,104,255,159,253,73,244,25,218,254,58,128,251,107,252,26,127,13,245,35,159,97,254,127,205,95,227,55,160,239,254,239,63,201,124,255,107,254,26,255,55,245,253,159,253,73,244,222,31,244,99,220,207,175,249,31,225,247,95,151,120,68,254,254,181,248,239,95,207,254,253,235,240,223,191,190,253,251,55,224,191,127,3,143,167,192,46,61,185,248,181,34,114,241,107,125,227,114,177,247,117,230,41,38,23,102,12,6,246,159,244,155,209,63,191,22,228,226,47,250,181,205,24,126,175,223,68,62,243,229,226,233,111,226,203,197,175,213,147,139,127,235,215,248,57,145,139,137,47,23,255,214,141,111,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,115,243,252,168,215,31,61,255,127,125,46,191,102,188,250,19,20,90,254,251,191,198,111,250,23,81,150,234,247,244,225,121,57,3,206,31,80,12,107,243,13,244,5,231,27,36,151,240,155,114,78,224,223,167,124,194,88,242,15,127,147,196,252,38,39,240,213,159,244,235,166,255,25,193,255,234,111,250,117,56,61,248,155,254,65,242,247,175,241,55,17,204,63,233,215,144,252,130,247,249,95,67,159,255,53,145,207,255,111,250,252,255,254,147,20,54,229,44,126,253,63,8,249,9,228,49,76,46,130,218,252,73,154,119,64,46,227,15,50,120,252,90,138,199,175,231,225,129,207,126,61,15,143,95,75,251,115,159,11,30,253,207,5,15,124,174,57,13,238,235,215,234,244,245,235,119,250,250,245,7,250,250,245,7,250,250,245,163,125,253,58,182,47,206,51,132,99,254,135,48,94,228,29,20,47,254,251,215,116,185,22,254,251,215,114,185,22,254,251,215,246,242,20,120,254,191,158,107,193,227,231,90,190,141,78,57,215,114,223,142,225,47,252,53,228,51,127,12,127,214,175,225,198,240,235,250,99,248,33,229,85,190,174,252,250,114,106,114,123,190,92,124,147,60,242,255,4,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((Tutorial03Technique.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Tutorial03Technique.cid0))
			{
				this.Scale = value;
				return true;
			}
			return false;
		}
	}
}
