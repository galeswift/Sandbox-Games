// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Background.fx
// Namespace = Tutorials.Tutorial_28.Shaders

namespace Tutorials.Tutorial_28.Shaders
{
	
	/// <summary><para>Technique 'BackgroundFill' generated from file 'Background.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 16 instruction slots used (1 texture, 15 arithmetic), 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class BackgroundFill : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'BackgroundFill' shader</summary>
		public BackgroundFill()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(213));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			BackgroundFill.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			BackgroundFill.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			BackgroundFill.sid0 = state.GetNameUniqueID("CubeRgbmSampler");
			BackgroundFill.tid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Graphics.TextureCube>("CubeRgbmTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != BackgroundFill.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], BackgroundFill.gid0, ref this.gc0));
			// Assign global textures
			this.CubeRgbmTexture = state.GetGlobalTextureCube(BackgroundFill.tid0);
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				BackgroundFill.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				BackgroundFill.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(BackgroundFill.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					BackgroundFill.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref BackgroundFill.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((BackgroundFill.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((BackgroundFill.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			BackgroundFill.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out BackgroundFill.fx, BackgroundFill.fxb, 8, 19);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(BackgroundFill.vin[i]));
			index = BackgroundFill.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc0;
		/// <summary>Get/Set the Texture Sampler State for 'SamplerCUBE CubeRgbmSampler'</summary>
		public Xen.Graphics.TextureSamplerState CubeRgbmSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'TextureCube CubeRgbmTexture'</summary>
		private Microsoft.Xna.Framework.Graphics.TextureCube CubeRgbmTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.TextureCube)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'SamplerCUBE CubeRgbmSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'TextureCube CubeRgbmTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,152,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,14,131,0,0,1,4,1,0,1,0,1,14,1,204,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,14,1,180,1,0,1,0,1,14,1,200,138,0,0,1,15,1,140,135,0,0,1,3,1,0,1,0,1,15,1,8,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,220,1,0,1,0,1,14,1,216,131,0,0,1,93,134,0,0,1,14,1,244,1,0,1,0,1,14,1,240,1,0,1,0,1,15,1,60,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,16,1,0,1,0,1,15,1,12,131,0,0,1,93,134,0,0,1,15,1,40,1,0,1,0,1,15,1,36,1,0,1,0,1,15,1,124,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,80,1,0,1,0,1,15,1,76,131,0,0,1,93,134,0,0,1,15,1,104,1,0,1,0,1,15,1,100,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,1,1,184,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,4,131,0,0,1,180,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,180,1,0,1,1,1,0,1,3,138,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,46,1,0,1,6,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,13,1,240,1,85,1,64,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,13,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,136,1,0,1,225,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,52,1,148,1,235,1,0,1,3,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,208,1,148,1,235,1,0,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,12,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,7,1,128,1,0,1,0,1,21,1,21,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,16,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,212,1,0,1,0,1,1,1,180,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,116,1,0,1,1,1,0,1,5,138,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,3,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,16,1,5,1,0,1,32,1,32,1,6,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,29,176,0,0,1,64,1,64,142,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,64,1,25,1,18,1,0,1,18,135,0,0,1,16,1,29,1,196,1,0,1,34,131,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,2,1,0,1,85,1,108,1,0,1,161,1,2,1,255,1,0,1,92,134,0,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,3,1,160,1,27,1,180,1,0,1,161,1,1,1,4,1,0,1,200,1,7,1,0,1,4,1,160,1,27,1,180,1,0,1,161,1,1,1,5,1,0,1,92,1,7,1,0,1,5,1,160,1,27,1,180,1,177,1,161,1,1,1,6,1,2,1,200,1,7,1,0,1,5,1,160,1,198,1,192,1,180,1,171,1,1,1,6,1,5,1,200,1,7,1,0,1,4,1,160,1,198,1,192,1,180,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,3,1,160,1,198,1,192,1,180,1,171,1,1,1,4,1,3,1,92,134,0,0,1,108,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,3,1,160,1,177,1,180,1,180,1,171,1,1,1,4,1,3,1,200,1,7,1,0,1,4,1,160,1,177,1,180,1,180,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,2,1,160,1,177,1,180,1,180,1,171,1,1,1,6,1,5,1,92,134,0,0,1,27,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,2,1,160,1,108,1,192,1,180,1,171,1,1,1,6,1,2,1,200,1,14,1,0,1,1,1,160,1,108,1,252,1,140,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,3,1,160,1,108,1,192,1,180,1,171,1,1,1,4,1,3,1,200,1,1,1,0,1,1,1,0,1,190,1,195,1,0,1,240,1,3,1,0,1,0,1,200,1,2,1,0,1,1,1,0,1,195,1,195,1,0,1,240,1,1,1,0,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,195,1,0,1,240,1,2,1,0,1,0,1,200,1,1,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,1,1,0,1,200,1,12,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,3,1,0,1,200,1,7,1,128,1,0,1,0,1,21,1,21,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,151,0,0,132,255,0,138,0,0,1,1,1,100,1,16,1,42,1,17,1,1,131,0,0,1,248,131,0,0,1,108,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,108,1,0,1,1,140,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,2,1,144,131,0,0,1,3,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,7,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,7,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,190,1,190,1,0,1,176,131,0,0,1,200,1,2,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,0,1,1,1,0,1,200,1,12,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,0,1,3,1,0,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {104,42,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,188,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,63,75,191,195,239,67,253,240,123,43,126,239,15,50,239,253,158,191,137,124,247,111,109,120,239,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,236,60,191,254,175,193,241,221,4,129,154,137,211,254,42,141,211,190,201,56,82,251,41,208,15,192,3,238,63,167,253,4,109,40,102,108,118,164,207,223,76,219,249,207,175,69,255,71,216,219,253,220,224,136,49,252,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,224,239,95,247,215,136,191,143,120,54,246,254,111,72,255,63,91,54,109,182,156,2,66,138,49,188,158,103,179,188,22,88,192,43,249,53,100,108,120,55,245,222,45,233,255,127,148,247,247,95,70,255,255,135,188,191,159,19,125,230,30,141,254,54,250,253,159,242,254,254,147,188,248,255,55,208,223,65,159,63,69,191,255,247,168,237,191,69,255,255,83,245,239,95,78,191,255,79,244,255,223,51,210,246,183,162,207,126,179,223,212,181,29,209,239,91,244,255,63,40,210,246,13,125,246,210,107,91,210,239,115,109,247,235,201,15,110,255,127,211,99,230,229,191,195,47,191,246,255,253,127,255,95,255,247,206,175,113,242,230,248,201,239,68,127,254,177,191,134,124,134,182,191,19,183,250,53,210,63,140,254,121,170,239,255,154,244,239,115,250,249,251,254,26,66,171,95,91,63,107,21,166,228,23,254,218,191,246,215,164,111,126,77,162,238,16,159,42,79,253,181,191,14,113,222,175,201,255,201,67,31,223,251,253,119,126,141,47,138,105,93,53,213,121,155,110,189,186,147,126,251,249,235,231,169,204,96,122,82,45,86,69,73,191,60,28,239,125,58,126,120,127,111,188,119,176,191,255,107,252,4,77,237,175,249,107,252,166,127,209,175,241,107,252,129,39,127,240,31,244,7,29,154,126,126,23,66,155,230,252,15,162,217,254,147,126,23,25,194,159,69,19,243,23,61,97,212,127,83,250,252,63,251,147,126,141,223,224,63,251,139,126,93,254,251,55,160,191,255,111,250,255,175,161,127,255,250,248,158,63,11,255,254,207,254,32,226,177,95,155,176,166,223,191,162,255,255,53,252,247,175,197,127,255,26,127,16,141,229,15,250,245,184,47,192,251,202,194,254,181,24,15,3,75,250,162,182,127,209,111,73,109,5,214,255,253,7,255,90,225,119,220,246,215,180,127,59,88,191,38,227,249,213,95,228,250,249,191,181,173,195,249,215,196,119,191,193,239,66,63,255,179,63,232,255,254,191,127,13,126,12,15,252,26,250,252,101,204,3,255,23,241,192,174,229,129,63,241,215,144,207,240,149,225,129,63,138,254,217,225,247,127,29,150,153,3,250,255,183,127,13,171,63,236,124,119,101,241,235,62,151,95,147,15,100,142,127,163,63,136,230,86,231,251,55,166,241,155,223,127,19,154,3,243,59,114,96,238,119,106,255,31,25,94,33,26,254,71,76,59,162,229,175,77,252,33,116,5,175,124,5,90,254,73,52,198,95,71,254,198,123,255,217,159,4,250,254,58,172,74,240,217,95,67,125,200,103,63,102,121,4,223,255,103,127,145,252,253,107,241,223,191,174,253,251,215,225,191,127,125,250,91,250,252,77,169,239,191,140,231,14,120,160,127,51,91,152,143,31,201,239,207,111,249,53,60,240,107,232,243,238,55,251,53,84,126,255,188,95,219,240,192,225,111,34,159,249,60,176,255,155,56,30,248,117,60,30,248,243,248,179,95,135,243,191,127,25,253,255,111,251,53,76,110,217,241,192,55,37,211,234,211,88,184,255,214,141,111,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,220,62,63,234,253,71,207,143,158,31,61,255,127,123,190,110,174,5,49,251,175,197,49,251,239,249,123,250,240,188,156,10,199,236,191,38,199,212,242,59,98,104,63,7,211,205,187,72,124,252,155,34,214,254,139,144,71,25,75,78,228,111,146,156,9,66,209,95,31,113,244,159,244,235,164,255,25,245,251,213,223,244,235,112,74,247,215,255,131,228,239,95,227,111,162,190,254,36,201,183,248,159,255,53,244,249,95,19,249,252,255,166,207,255,111,254,252,55,224,126,57,87,243,39,153,190,126,77,237,235,215,245,250,194,103,191,174,215,151,230,126,188,207,165,175,254,231,210,215,175,105,251,226,60,16,255,237,247,245,235,117,250,250,245,6,250,250,245,6,250,250,245,162,125,253,58,182,175,223,128,115,12,146,147,162,255,255,69,242,183,228,164,126,77,251,55,183,71,238,235,47,138,229,164,126,13,47,39,133,231,71,57,169,159,223,57,41,60,126,78,234,49,243,192,251,228,148,37,39,117,240,107,216,156,242,207,74,254,233,235,234,185,174,62,211,223,3,189,245,27,132,250,227,47,146,191,173,140,235,223,34,135,190,92,253,26,17,185,250,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((BackgroundFill.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == BackgroundFill.sid0))
			{
				this.CubeRgbmSampler = value;
				return true;
			}
			return false;
		}
	}
}
