// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Composite.fx
// Namespace = Tutorials.Tutorial_28.Shaders

namespace Tutorials.Tutorial_28.Shaders
{
	
	/// <summary><para>Technique 'RgbmDecode' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 41 instruction slots used (2 texture, 39 arithmetic), 7 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class RgbmDecode : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecode' shader</summary>
		public RgbmDecode()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(197));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecode.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			RgbmDecode.cid0 = state.GetNameUniqueID("UseExposureTonemapping");
			RgbmDecode.cid1 = state.GetNameUniqueID("UseFilmApproxTonemapping");
			RgbmDecode.cid2 = state.GetNameUniqueID("UseGammaCorrection");
			RgbmDecode.cid3 = state.GetNameUniqueID("UseInverseOneTonemapping");
			RgbmDecode.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecode.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecode.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecode.sid0 = state.GetNameUniqueID("BloomSampler");
			RgbmDecode.sid1 = state.GetNameUniqueID("InputSampler");
			RgbmDecode.tid0 = state.GetNameUniqueID("InputTexture");
			RgbmDecode.tid1 = state.GetNameUniqueID("BloomTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecode.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecode.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecode.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecode.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecode.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecode.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecode.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecode.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecode.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecode.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			RgbmDecode.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecode.fx, RgbmDecode.fxb, 9, 47);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecode.vin[i]));
			index = RgbmDecode.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'UseExposureTonemapping'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'bool UseExposureTonemapping'</summary>
		public float UseExposureTonemapping
		{
			set
			{
				this.preg[3] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseFilmApproxTonemapping'</summary>
		private static int cid1;
		/// <summary>Assign the shader value 'bool UseFilmApproxTonemapping'</summary>
		public float UseFilmApproxTonemapping
		{
			set
			{
				this.preg[5] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseGammaCorrection'</summary>
		private static int cid2;
		/// <summary>Assign the shader value 'bool UseGammaCorrection'</summary>
		public float UseGammaCorrection
		{
			set
			{
				this.preg[4] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseInverseOneTonemapping'</summary>
		private static int cid3;
		/// <summary>Assign the shader value 'bool UseInverseOneTonemapping'</summary>
		public float UseInverseOneTonemapping
		{
			set
			{
				this.preg[6] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BloomSampler'</summary>
		public Xen.Graphics.TextureSamplerState BloomSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D BloomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D BloomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BloomSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D BloomTexture'</summary>
		static int tid1;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[7];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,28,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,248,135,0,1,7,131,0,1,4,131,0,1,1,229,0,0,142,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,160,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,8,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,44,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,80,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,1,1,4,1,0,1,0,1,1,1,32,138,0,0,1,14,1,172,1,0,1,0,1,14,1,200,138,0,0,1,15,1,20,1,0,1,0,1,15,1,40,138,0,0,1,15,1,56,1,0,1,0,1,15,1,76,138,0,0,1,16,1,16,135,0,0,1,3,1,0,1,0,1,15,1,140,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,96,1,0,1,0,1,15,1,92,131,0,0,1,93,134,0,0,1,15,1,120,1,0,1,0,1,15,1,116,1,0,1,0,1,15,1,192,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,148,1,0,1,0,1,15,1,144,131,0,0,1,93,134,0,0,1,15,1,172,1,0,1,0,1,15,1,168,1,0,1,0,1,16,136,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,212,1,0,1,0,1,15,1,208,131,0,0,1,93,134,0,0,1,15,1,236,1,0,1,0,1,15,1,232,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,148,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {204,50,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,210,223,76,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,255,77,191,251,245,127,141,111,174,159,247,125,24,175,85,136,215,95,244,155,200,119,255,214,175,241,115,135,215,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,124,125,16,35,82,252,56,65,160,102,226,180,223,224,55,149,239,190,201,56,85,251,41,208,207,111,244,107,8,220,145,246,19,180,161,152,177,217,113,109,94,14,181,217,253,53,126,29,224,245,155,105,59,255,249,181,232,255,120,173,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,1,32,191,238,192,251,136,121,99,239,255,134,244,255,179,101,211,102,203,41,32,240,24,94,207,179,89,94,255,26,191,22,222,249,53,181,141,137,215,83,239,221,146,254,255,71,121,127,99,208,169,55,33,127,29,197,212,255,148,198,213,120,126,43,66,96,203,163,217,1,253,254,220,251,251,183,250,205,228,39,104,240,199,233,231,160,215,159,162,223,255,1,244,217,239,75,255,255,83,245,239,119,244,123,75,255,255,199,34,109,255,44,250,236,79,243,218,254,77,244,251,95,71,255,255,117,126,179,126,219,127,139,62,255,215,188,182,255,19,253,254,223,41,204,95,79,126,112,251,255,155,30,51,188,57,136,241,107,255,223,255,247,255,245,127,191,254,53,78,222,28,63,249,157,232,207,223,246,215,148,207,128,255,239,36,205,210,223,140,62,251,189,245,253,95,159,254,253,3,232,231,138,254,255,31,253,26,134,167,127,173,95,227,191,82,152,255,27,127,246,107,210,127,191,158,101,8,201,83,252,181,127,237,175,201,223,252,58,60,15,63,23,143,242,254,95,251,235,16,247,255,154,252,159,247,249,110,255,115,250,248,222,239,191,243,107,124,81,76,235,170,169,206,219,116,235,213,157,244,219,207,95,63,79,133,187,210,147,106,177,42,74,250,229,225,120,239,211,241,195,251,123,227,189,131,253,253,95,227,39,136,133,127,253,95,227,55,253,139,14,255,154,191,235,31,252,53,126,141,63,232,247,248,115,254,236,223,254,247,248,19,255,145,245,103,248,252,55,160,207,127,241,111,181,252,61,9,60,125,254,111,255,30,232,7,159,255,24,125,78,164,62,70,123,131,239,239,66,36,39,89,248,131,136,162,127,210,239,34,228,255,147,72,121,252,69,230,247,95,147,126,127,194,83,240,155,82,155,255,140,190,251,207,254,162,95,151,255,254,13,232,239,255,155,254,255,149,254,253,235,227,123,254,204,255,155,128,240,247,191,166,254,253,235,75,10,233,215,250,181,126,141,95,243,15,34,26,252,65,242,251,175,69,191,127,165,191,255,58,244,251,95,131,247,248,157,95,235,215,248,207,254,224,95,159,250,248,113,198,231,55,248,131,8,240,95,244,123,179,136,1,222,255,253,7,3,230,175,73,255,255,117,88,172,164,143,223,128,218,252,6,138,215,175,101,251,253,107,44,30,191,38,227,37,239,252,218,193,59,127,205,95,132,207,126,45,233,151,250,194,123,255,247,95,68,92,246,107,17,87,1,167,63,72,126,255,181,232,247,175,244,247,95,135,126,255,107,254,32,31,54,222,243,255,198,255,13,254,191,238,0,254,102,188,130,235,87,220,167,161,209,175,231,209,232,215,243,104,228,211,245,215,242,250,248,245,6,250,248,245,245,251,95,67,97,18,23,242,124,185,207,191,210,207,127,173,206,231,127,141,126,254,235,240,231,166,159,95,103,227,88,126,91,224,197,115,247,132,231,65,248,231,215,84,254,49,52,166,241,49,205,1,239,215,34,216,164,167,255,162,31,243,230,14,109,208,39,183,249,13,204,59,248,140,223,253,181,126,141,223,224,55,96,122,253,223,255,247,175,193,143,209,63,191,134,62,255,26,235,154,255,139,244,207,174,213,63,127,226,175,33,159,225,43,163,127,254,40,250,103,135,223,255,117,88,127,31,208,255,191,253,107,88,123,103,245,74,215,46,124,221,231,242,107,202,189,200,229,111,244,7,145,60,170,188,254,198,68,7,243,251,111,66,244,49,191,255,166,196,135,230,247,95,131,232,39,191,67,214,127,93,239,115,106,247,31,153,207,105,140,255,209,175,169,239,254,58,52,87,194,95,152,183,175,64,243,63,73,100,12,127,227,61,154,75,43,119,248,12,50,235,62,19,125,241,127,67,22,248,179,31,99,157,240,107,254,71,191,6,127,255,159,253,69,242,247,175,197,127,255,186,246,239,95,135,255,254,245,236,223,191,1,255,253,235,211,223,192,11,248,81,219,63,201,204,46,230,239,71,182,230,71,182,230,71,182,230,71,182,230,231,194,214,24,253,243,107,232,243,167,253,102,191,134,218,154,63,239,215,54,250,231,240,55,145,207,192,224,70,255,236,211,103,79,127,13,97,250,95,135,254,125,78,63,127,95,250,255,159,199,159,253,58,188,182,246,151,209,255,255,182,95,195,172,11,58,93,3,21,247,77,60,26,47,90,184,255,214,141,111,252,232,249,209,243,255,175,231,71,163,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,115,253,124,221,188,32,114,46,255,30,231,92,126,207,223,211,135,167,185,149,63,200,228,11,37,207,39,191,35,222,55,249,66,228,27,252,124,97,55,47,40,121,150,223,244,15,250,247,40,102,70,78,111,204,237,126,211,191,73,242,119,146,239,163,60,197,159,244,235,164,255,25,225,240,213,223,244,235,240,18,27,229,17,249,239,95,227,111,250,181,144,235,145,60,136,247,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,53,111,248,7,113,62,72,251,250,53,181,175,95,215,235,11,159,253,186,94,95,154,167,241,62,151,190,250,159,75,95,46,71,249,107,113,95,191,102,167,175,95,175,211,215,175,55,208,215,175,55,208,215,175,23,237,235,215,177,125,113,126,225,215,248,13,232,239,255,251,79,210,49,255,71,146,227,10,115,165,191,102,39,87,250,107,117,114,165,191,182,151,43,253,53,189,92,41,158,31,229,74,127,148,43,253,81,174,244,71,185,210,159,139,92,41,30,63,87,250,156,117,205,251,172,203,73,174,244,224,215,176,235,114,63,43,121,209,175,107,127,85,46,255,160,152,157,213,207,3,123,234,233,248,63,169,163,227,255,164,142,142,255,147,58,58,254,79,138,233,248,255,39,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.cid0))
			{
				this.UseExposureTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid1))
			{
				this.UseFilmApproxTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid2))
			{
				this.UseGammaCorrection = value;
				return true;
			}
			if ((id == RgbmDecode.cid3))
			{
				this.UseInverseOneTonemapping = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.sid0))
			{
				this.BloomSampler = value;
				return true;
			}
			if ((id == RgbmDecode.sid1))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			if ((id == RgbmDecode.tid1))
			{
				this.BloomTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'RgbmDecodeBloomPass' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 21 instruction slots used (1 texture, 20 arithmetic), 3 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class RgbmDecodeBloomPass : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecodeBloomPass' shader</summary>
		public RgbmDecodeBloomPass()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecodeBloomPass.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			RgbmDecodeBloomPass.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecodeBloomPass.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecodeBloomPass.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecodeBloomPass.sid0 = state.GetNameUniqueID("InputSampler");
			RgbmDecodeBloomPass.tid0 = state.GetNameUniqueID("InputTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecodeBloomPass.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecodeBloomPass.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecodeBloomPass.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecodeBloomPass.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecodeBloomPass.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecodeBloomPass.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecodeBloomPass.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecodeBloomPass.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecodeBloomPass.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecodeBloomPass.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			RgbmDecodeBloomPass.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecodeBloomPass.fx, RgbmDecodeBloomPass.fxb, 9, 25);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecodeBloomPass.vin[i]));
			index = RgbmDecodeBloomPass.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[3];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,184,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,184,135,0,1,3,131,0,1,4,131,0,1,1,179,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,96,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,200,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,236,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,196,131,0,0,1,224,138,0,0,1,14,1,108,1,0,1,0,1,14,1,136,138,0,0,1,14,1,212,1,0,1,0,1,14,1,232,138,0,0,1,15,1,172,135,0,0,1,3,1,0,1,0,1,15,1,40,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,252,1,0,1,0,1,14,1,248,131,0,0,1,93,134,0,0,1,15,1,20,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,92,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,48,1,0,1,0,1,15,1,44,131,0,0,1,93,134,0,0,1,15,1,72,1,0,1,0,1,15,1,68,1,0,1,0,1,15,1,156,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,112,1,0,1,0,1,15,1,108,131,0,0,1,93,134,0,0,1,15,1,136,1,0,1,0,1,15,1,132,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,151,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {64,44,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,190,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,191,75,191,195,223,95,183,31,134,187,10,225,254,1,191,137,124,247,111,253,26,95,31,238,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,122,207,175,255,107,112,252,55,65,160,102,226,180,127,74,227,180,111,50,206,212,126,10,244,243,27,253,26,2,247,191,211,126,130,54,20,51,54,59,210,231,111,166,237,252,231,215,162,255,35,44,238,126,110,112,196,24,126,179,200,247,248,59,246,222,143,209,255,159,148,249,114,86,44,47,240,247,175,251,107,196,223,71,60,27,123,255,55,164,255,159,45,155,54,91,78,25,2,198,240,122,158,205,242,90,96,1,175,228,215,144,207,241,110,234,189,91,210,255,255,40,239,239,127,140,254,255,31,249,223,19,125,254,40,143,70,255,26,253,254,95,121,127,255,77,94,126,96,75,127,7,125,254,20,253,254,255,160,182,255,27,253,255,79,213,191,127,43,106,243,155,209,255,255,128,72,219,125,250,108,231,55,117,109,159,211,239,223,166,255,255,69,145,182,45,125,182,242,218,254,113,244,251,31,165,237,126,61,249,193,237,255,111,122,204,188,252,1,248,224,215,254,191,255,239,255,235,255,62,248,53,78,222,28,63,249,157,232,207,191,246,215,144,207,240,213,239,196,173,126,141,244,47,163,127,158,234,251,191,54,253,251,156,126,254,190,232,227,215,48,252,249,107,253,26,127,154,194,148,252,194,95,251,215,254,154,244,205,175,73,212,253,181,245,243,247,125,148,231,254,218,95,135,56,243,215,228,255,228,161,143,239,253,254,59,191,198,23,197,180,174,154,234,188,77,183,94,221,73,191,253,252,245,243,84,102,56,61,169,22,171,162,164,95,30,142,247,62,29,63,188,191,55,222,59,216,223,255,53,126,130,166,254,215,254,53,126,211,191,232,207,249,179,255,236,163,63,231,207,254,237,127,143,127,254,159,251,231,62,3,60,124,254,235,208,231,191,198,175,241,7,253,131,126,255,191,11,13,151,120,229,15,162,17,254,73,191,139,12,253,79,250,53,126,131,223,244,47,122,194,67,254,77,233,243,255,140,254,254,207,254,162,95,151,255,254,13,232,239,255,155,254,255,149,254,253,235,227,123,254,204,255,155,128,252,69,191,129,109,255,159,253,65,191,246,175,241,159,253,69,244,217,175,77,163,227,182,191,230,175,241,213,95,252,235,113,95,2,175,11,203,124,247,107,218,126,240,251,175,193,223,253,134,30,156,95,251,215,248,191,255,162,95,147,219,254,118,252,189,233,3,191,19,191,203,187,191,129,124,247,107,255,26,127,205,95,244,235,115,91,188,251,107,112,31,191,166,254,238,62,255,74,127,255,181,232,247,191,70,219,252,58,252,185,252,254,107,113,123,129,11,124,49,150,255,236,15,250,191,255,239,95,131,31,195,119,191,134,62,255,26,38,243,215,254,191,136,239,118,45,223,253,137,191,134,124,134,175,12,223,253,81,244,207,14,191,255,235,176,156,30,208,255,191,253,107,88,157,101,121,172,43,255,95,247,185,252,154,188,37,252,241,27,253,65,196,23,202,43,191,49,141,223,252,254,155,16,253,205,239,191,41,209,219,252,142,185,144,223,127,93,166,157,251,156,218,253,71,230,115,26,227,127,244,107,234,187,191,14,241,220,175,203,115,9,254,251,10,52,254,147,104,236,191,142,252,141,247,254,179,63,9,116,119,159,253,53,212,183,251,76,248,22,252,33,159,253,24,243,208,175,249,31,253,26,252,253,127,246,23,201,223,191,22,255,253,235,218,191,127,29,254,251,215,179,127,255,6,252,247,175,79,127,3,47,224,71,109,255,36,51,187,152,191,31,233,152,31,233,152,31,182,142,49,124,247,107,232,243,167,253,102,191,134,234,152,63,239,215,54,124,119,248,155,200,103,62,223,237,255,38,142,239,126,29,143,239,254,60,254,236,215,225,188,56,120,243,111,251,53,76,78,222,241,221,55,165,119,212,215,179,112,255,173,27,223,248,209,243,163,231,71,207,143,158,31,61,63,122,126,244,124,83,207,143,224,252,232,249,209,243,163,231,71,207,143,30,60,95,55,31,132,120,255,223,227,120,255,247,252,61,125,120,94,126,199,230,125,76,158,72,98,104,249,253,215,226,152,121,56,31,36,113,249,111,250,7,253,123,20,103,35,151,51,150,252,208,223,36,121,27,201,243,252,90,191,198,87,127,210,175,147,254,103,132,195,87,127,211,175,195,105,111,202,31,241,223,191,198,223,244,107,33,207,32,57,33,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,107,190,232,15,226,188,132,246,245,107,106,95,191,174,215,23,62,251,117,189,190,52,255,228,125,46,125,245,63,151,190,92,110,234,215,226,190,126,205,78,95,191,94,167,175,95,111,160,175,95,111,160,175,95,47,218,215,175,99,251,146,188,198,111,64,127,255,223,127,146,159,35,251,53,58,57,178,95,179,147,35,251,181,58,57,50,228,94,76,142,236,215,244,114,100,120,126,148,35,251,81,142,236,135,157,35,195,227,231,200,158,99,50,223,43,15,47,57,178,131,95,195,230,225,127,86,242,97,95,87,239,110,210,175,250,121,160,71,61,217,254,147,58,178,253,39,117,100,251,79,234,200,246,159,20,147,237,255,39,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.sid0))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			return false;
		}
	}
}
