// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = shader.fx
// Namespace = Tutorials.Tutorial_25

namespace Tutorials.Tutorial_25.Shader
{
	
	/// <summary><para>Technique 'ShadowShader' generated from file 'shader.fx'</para><para>Vertex Shader: approximately 21 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 13 instruction slots used (2 texture, 11 arithmetic), 0 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "e03e5007-ea04-4dcc-8690-d7e2837ab13f")]
	public sealed class ShadowShader : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'ShadowShader' shader</summary>
		public ShadowShader()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ShadowShader.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ShadowShader.cid0 = state.GetNameUniqueID("lightColour");
			ShadowShader.cid1 = state.GetNameUniqueID("shadowMapProjection");
			ShadowShader.cid2 = state.GetNameUniqueID("shadowViewDirection");
			ShadowShader.sid0 = state.GetNameUniqueID("ShadowSampler");
			ShadowShader.sid1 = state.GetNameUniqueID("TextureSampler");
			ShadowShader.tid0 = state.GetNameUniqueID("ShadowMap");
			ShadowShader.tid1 = state.GetNameUniqueID("TextureMap");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ShadowShader.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldMatrix'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[8], ref this.vreg[9], ref this.vreg[10], ref this.vreg[11], ref this.sc0));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc1));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ShadowShader.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ShadowShader.fx.vsb_c, ref this.sc2));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc3));
				if ((this.vireg_change == true))
				{
					ShadowShader.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ShadowShader.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ShadowShader.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ShadowShader.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ShadowShader.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ShadowShader.fx, ShadowShader.fxb, 22, 20);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ShadowShader.vin[i]));
			index = ShadowShader.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'lightColour'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float3 lightColour'</summary><param name="value"/>
		public void SetLightColour(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 lightColour'</summary>
		public Microsoft.Xna.Framework.Vector3 LightColour
		{
			set
			{
				this.SetLightColour(ref value);
			}
		}
		/// <summary>Name ID for 'shadowMapProjection'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float4x4 shadowMapProjection'</summary><param name="value"/>
		public void SetShadowMapProjection(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[4] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[5] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[6] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg[7] = new Microsoft.Xna.Framework.Vector4(value.M14, value.M24, value.M34, value.M44);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x4 shadowMapProjection'</summary>
		public Microsoft.Xna.Framework.Matrix ShadowMapProjection
		{
			set
			{
				this.SetShadowMapProjection(ref value);
			}
		}
		/// <summary>Name ID for 'shadowViewDirection'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float3 shadowViewDirection'</summary><param name="value"/>
		public void SetShadowViewDirection(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[12] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 shadowViewDirection'</summary>
		public Microsoft.Xna.Framework.Vector3 ShadowViewDirection
		{
			set
			{
				this.SetShadowViewDirection(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'viewProjection'</summary>
		private int sc3;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D ShadowSampler'</summary>
		public Xen.Graphics.TextureSamplerState ShadowSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState TextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D ShadowMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D ShadowMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D TextureMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D TextureMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D ShadowSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D ShadowMap'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D TextureMap'</summary>
		static int tid1;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,36,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,16,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,52,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,88,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,14,1,180,1,0,1,0,1,14,1,208,138,0,0,1,15,1,28,1,0,1,0,1,15,1,48,138,0,0,1,15,1,64,1,0,1,0,1,15,1,84,138,0,0,1,16,1,24,135,0,0,1,3,1,0,1,0,1,15,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,104,1,0,1,0,1,15,1,100,131,0,0,1,93,134,0,0,1,15,1,128,1,0,1,0,1,15,1,124,1,0,1,0,1,15,1,200,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,156,1,0,1,0,1,15,1,152,131,0,0,1,93,134,0,0,1,15,1,180,1,0,1,0,1,15,1,176,1,0,1,0,1,16,1,8,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,220,1,0,1,0,1,15,1,216,131,0,0,1,93,134,0,0,1,15,1,244,1,0,1,0,1,15,1,240,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,196,1,16,1,42,1,17,132,0,0,1,244,131,0,0,1,208,135,0,0,1,36,131,0,0,1,160,131,0,0,1,200,139,0,0,1,120,131,0,0,1,28,131,0,0,1,106,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,99,131,0,0,1,68,1,0,1,3,131,0,0,1,1,133,0,0,1,76,135,0,0,1,92,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,76,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,144,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,36,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,160,0,0,1,63,131,0,0,1,191,131,0,0,1,63,1,128,1,0,1,0,1,186,1,131,1,18,1,111,1,67,1,16,1,68,1,254,140,0,0,1,1,1,64,1,80,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,64,1,7,1,0,1,0,1,34,133,0,0,1,76,1,64,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,3,1,0,1,198,1,192,1,0,1,161,1,0,1,254,1,0,1,200,1,7,1,0,1,3,1,0,1,190,1,190,1,111,1,203,1,3,1,1,1,254,1,16,1,24,1,16,1,1,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,100,1,8,1,0,1,97,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,200,1,2,1,0,1,0,1,4,1,108,1,108,1,0,1,224,1,3,1,0,1,0,1,168,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,58,1,30,131,0,0,1,252,1,252,1,108,1,225,1,1,1,2,1,0,1,200,1,143,1,192,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,3,1,208,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,56,1,0,1,0,1,1,1,152,135,0,0,1,36,134,0,0,1,1,1,208,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,134,0,0,1,1,1,152,1,0,1,33,1,0,1,6,138,0,0,1,36,1,99,131,0,0,1,1,131,0,0,1,7,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,12,1,0,1,8,1,0,1,13,1,0,1,9,1,0,1,14,1,0,1,10,1,0,1,47,1,0,1,11,1,0,1,0,1,48,1,80,1,0,1,1,1,241,1,81,1,0,1,5,1,114,1,82,1,0,1,0,1,16,1,25,131,0,0,1,26,131,0,0,1,27,131,0,0,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,32,1,245,1,85,1,96,1,5,1,16,1,11,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,12,1,194,1,0,1,18,133,0,0,1,32,1,18,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,16,1,32,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,32,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,6,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,6,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,6,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,6,1,3,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,17,1,0,1,200,1,7,1,0,1,4,1,0,1,198,1,180,1,0,1,225,1,0,1,4,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,5,1,4,1,200,1,14,131,0,0,1,27,1,252,1,140,1,235,1,0,1,3,1,0,1,200,1,1,131,0,0,1,195,1,195,1,0,1,240,131,0,0,1,88,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,1,2,1,2,1,0,1,200,1,1,1,128,1,1,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,1,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,1,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,1,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,7,131,0,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,1,1,0,1,0,1,2,1,190,1,190,1,0,1,176,1,0,1,12,1,0,1,200,1,7,1,128,1,2,1,0,1,108,1,192,1,0,1,161,1,0,1,13,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,196,1,16,1,42,1,17,132,0,0,1,244,131,0,0,1,208,135,0,0,1,36,131,0,0,1,160,131,0,0,1,200,139,0,0,1,120,131,0,0,1,28,131,0,0,1,106,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,99,131,0,0,1,68,1,0,1,3,131,0,0,1,1,133,0,0,1,76,135,0,0,1,92,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,76,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,144,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,36,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,160,0,0,1,63,131,0,0,1,191,131,0,0,1,63,1,128,1,0,1,0,1,186,1,131,1,18,1,111,1,67,1,16,1,68,1,254,140,0,0,1,1,1,64,1,80,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,64,1,7,1,0,1,0,1,34,133,0,0,1,76,1,64,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,3,1,0,1,198,1,192,1,0,1,161,1,0,1,254,1,0,1,200,1,7,1,0,1,3,1,0,1,190,1,190,1,111,1,203,1,3,1,1,1,254,1,16,1,24,1,16,1,1,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,100,1,8,1,0,1,97,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,200,1,2,1,0,1,0,1,4,1,108,1,108,1,0,1,224,1,3,1,0,1,0,1,168,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,58,1,30,131,0,0,1,252,1,252,1,108,1,225,1,1,1,2,1,0,1,200,1,143,1,192,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,18,1,144,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,152,1,0,1,0,1,2,1,248,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,184,1,0,1,33,1,0,1,8,138,0,0,1,36,1,99,131,0,0,1,1,131,0,0,1,5,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,16,1,9,1,0,1,32,1,32,1,10,1,0,1,0,1,48,1,80,1,0,1,1,1,241,1,81,1,0,1,5,1,114,1,82,1,0,1,0,1,16,1,48,131,0,0,1,50,131,0,0,1,51,131,0,0,1,52,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,56,180,0,0,1,63,1,128,1,0,1,0,1,64,1,64,134,0,0,1,241,1,85,1,80,1,6,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,16,1,35,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,48,1,54,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,48,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,8,1,0,1,148,1,198,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,8,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,6,1,14,1,0,1,200,1,15,1,0,1,5,1,160,1,27,1,136,1,0,1,161,1,6,1,15,1,0,1,92,1,15,1,0,1,2,1,160,1,27,1,136,1,177,1,161,1,6,1,16,1,8,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,6,1,16,1,2,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,6,1,15,1,5,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,14,1,4,1,92,1,2,1,0,1,8,1,0,131,27,0,1,161,1,1,1,0,1,8,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,14,1,4,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,6,1,15,1,5,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,6,1,16,1,2,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,8,1,200,1,15,1,0,1,2,1,160,1,108,1,208,1,148,1,171,1,6,1,16,1,2,1,200,1,15,1,0,1,5,1,160,1,108,1,255,1,143,1,171,1,6,1,15,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,14,1,4,1,200,1,1,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,2,1,0,1,4,1,0,1,248,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,4,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,4,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,4,1,2,1,0,1,20,1,17,1,0,1,8,1,0,1,190,1,190,1,27,1,176,1,4,1,0,1,1,1,168,1,36,1,7,1,8,1,0,1,190,1,190,1,0,1,144,1,4,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,8,1,8,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,195,1,0,1,240,1,6,1,0,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,195,1,0,1,240,1,5,1,0,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,195,1,0,1,240,1,2,1,0,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,4,1,8,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,4,1,10,1,0,1,20,1,24,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,4,1,11,1,1,1,168,1,18,1,1,1,0,1,0,1,190,1,190,1,0,1,144,1,5,1,8,1,8,1,20,1,20,131,0,0,1,190,1,190,1,27,1,176,1,5,1,9,1,1,1,168,1,72,1,1,1,0,1,0,1,190,1,190,1,0,1,144,1,5,1,10,1,10,1,200,1,15,1,0,1,4,1,0,1,176,1,27,1,166,1,108,1,255,1,1,1,4,1,20,1,18,1,0,1,1,1,0,1,85,1,62,1,27,1,175,1,4,1,9,1,1,1,168,1,129,1,1,1,2,1,0,1,195,1,195,1,0,1,208,1,0,1,0,1,11,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,1,3,1,3,1,0,1,88,1,29,1,0,1,1,1,0,1,5,1,4,1,108,1,224,1,2,1,1,1,130,1,200,1,1,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,7,131,0,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,1,1,0,1,0,1,2,1,190,1,190,1,0,1,176,1,0,1,12,1,0,1,200,1,7,1,128,1,2,1,0,1,108,1,192,1,0,1,161,1,0,1,13,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,196,1,16,1,42,1,17,132,0,0,1,244,131,0,0,1,208,135,0,0,1,36,131,0,0,1,160,131,0,0,1,200,139,0,0,1,120,131,0,0,1,28,131,0,0,1,106,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,99,131,0,0,1,68,1,0,1,3,131,0,0,1,1,133,0,0,1,76,135,0,0,1,92,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,76,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,144,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,36,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,160,0,0,1,63,131,0,0,1,191,131,0,0,1,63,1,128,1,0,1,0,1,186,1,131,1,18,1,111,1,67,1,16,1,68,1,254,140,0,0,1,1,1,64,1,80,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,64,1,7,1,0,1,0,1,34,133,0,0,1,76,1,64,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,3,1,0,1,198,1,192,1,0,1,161,1,0,1,254,1,0,1,200,1,7,1,0,1,3,1,0,1,190,1,190,1,111,1,203,1,3,1,1,1,254,1,16,1,24,1,16,1,1,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,100,1,8,1,0,1,97,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,200,1,2,1,0,1,0,1,4,1,108,1,108,1,0,1,224,1,3,1,0,1,0,1,168,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,58,1,30,131,0,0,1,252,1,252,1,108,1,225,1,1,1,2,1,0,1,200,1,143,1,192,1,0,1,0,1,21,1,108,1,0,1,225,151,0,0,132,255,0,138,0,0,1,3,1,24,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,188,1,0,1,0,1,1,1,92,135,0,0,1,36,134,0,0,1,1,1,100,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,134,0,0,1,1,1,92,1,0,1,33,1,0,1,3,138,0,0,1,36,1,99,131,0,0,1,1,131,0,0,1,3,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,32,1,80,1,6,1,0,1,0,1,48,1,80,1,0,1,1,1,241,1,81,1,0,1,5,1,114,1,82,1,0,1,0,1,16,1,18,131,0,0,1,19,131,0,0,1,20,131,0,0,1,21,1,0,1,0,1,16,1,22,1,0,1,0,1,16,1,27,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,80,1,23,1,0,1,0,1,34,133,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,3,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,1,1,8,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,176,1,1,1,9,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,176,1,1,1,10,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,3,1,8,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,3,1,9,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,3,1,10,1,0,1,200,1,8,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,3,1,11,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,1,2,1,2,1,0,1,200,1,1,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,1,1,0,1,167,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,1,131,0,0,1,195,1,195,1,0,1,240,131,0,0,1,88,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,200,1,7,131,0,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,1,1,0,1,0,1,2,1,190,1,190,1,0,1,176,1,0,1,12,1,0,1,200,1,7,1,128,1,2,1,0,1,108,1,192,1,0,1,161,1,0,1,13,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {64,48,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,182,126,51,249,253,215,198,223,191,134,249,231,215,248,53,126,19,250,255,175,227,254,252,255,245,243,235,209,255,127,255,203,230,247,159,254,26,142,14,127,213,111,34,223,253,91,191,198,207,31,58,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,255,91,158,95,255,215,224,56,109,130,64,205,196,105,191,217,111,42,223,253,58,250,255,111,34,78,211,126,10,244,243,27,253,26,2,119,95,251,9,218,172,154,223,191,217,113,109,126,239,161,54,187,138,171,182,243,159,95,139,254,143,215,186,159,203,56,254,232,29,140,243,55,139,124,143,191,99,239,253,24,253,255,73,153,47,103,197,242,2,192,127,221,129,247,17,243,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,22,88,191,166,182,193,231,120,55,245,222,253,141,232,203,45,111,2,254,54,138,161,255,37,141,163,241,252,78,212,225,142,71,163,223,147,126,127,227,253,253,59,253,102,242,19,99,254,211,244,115,208,231,79,209,239,231,244,217,140,254,255,167,234,223,127,16,253,254,51,244,255,127,46,210,246,47,162,207,254,60,175,237,223,69,191,255,109,244,255,223,232,55,235,183,253,143,232,243,127,207,107,251,191,209,239,191,92,97,254,122,242,131,219,255,223,244,152,225,253,103,248,229,215,254,191,255,239,255,235,255,30,253,26,39,111,142,159,252,78,244,231,47,254,53,228,51,180,253,157,184,213,175,145,182,244,207,211,95,195,240,235,175,245,107,60,215,247,127,95,254,236,215,164,255,126,189,95,99,166,159,41,63,253,181,191,14,113,212,175,201,255,121,159,239,246,63,167,143,239,253,254,59,191,198,23,197,180,174,154,234,188,77,183,94,221,73,191,253,252,245,243,84,102,44,61,169,22,171,162,164,95,30,142,247,62,29,63,188,191,55,222,59,216,223,255,53,126,130,167,242,55,253,139,8,196,239,65,255,255,7,171,223,226,15,253,123,254,175,167,191,217,9,62,255,53,249,243,63,232,247,144,30,228,249,93,104,248,244,194,31,68,24,255,73,242,251,175,249,7,81,59,253,253,215,250,131,126,173,95,227,215,231,223,169,233,159,244,107,252,6,191,233,95,100,126,255,53,233,247,95,143,127,71,251,255,251,79,250,117,153,12,191,30,193,249,53,232,239,127,233,79,250,117,152,133,240,221,95,243,39,253,26,12,255,175,249,139,228,51,180,249,207,232,255,255,18,112,252,139,158,208,123,212,31,253,253,95,255,65,191,198,111,240,159,253,69,191,22,195,249,53,1,231,15,38,90,252,65,191,174,251,155,254,255,127,255,69,191,9,247,249,155,243,223,238,221,255,140,240,249,207,254,34,105,251,155,80,159,127,18,225,253,39,9,78,191,193,175,175,239,254,42,250,156,222,253,13,126,3,252,252,139,254,239,255,155,135,111,231,254,215,208,231,111,195,100,254,218,255,23,205,125,107,231,254,207,253,53,229,51,127,238,255,180,95,83,230,30,159,253,38,191,198,111,193,115,143,121,127,204,157,252,38,44,63,79,233,247,55,191,166,201,63,253,181,127,237,175,201,92,241,235,252,26,158,216,252,255,250,81,61,107,199,221,213,71,95,247,185,252,154,178,33,188,251,27,253,65,191,134,242,247,175,241,107,252,198,150,215,193,55,191,150,253,253,55,253,131,126,109,251,251,175,241,7,253,58,250,251,175,205,252,104,100,227,215,248,131,126,61,175,13,189,243,31,153,207,105,188,250,251,175,9,152,250,251,175,69,48,127,253,255,232,215,84,248,191,14,241,236,175,107,249,247,43,122,231,63,99,153,145,191,1,143,120,154,228,196,125,246,215,16,44,247,217,175,193,159,253,223,4,83,62,251,49,145,147,255,8,178,245,155,252,26,255,217,95,36,127,255,90,252,247,111,106,255,254,117,248,239,223,204,254,253,27,240,223,191,185,254,253,107,233,251,191,142,253,91,222,255,117,237,223,242,254,175,103,255,150,247,127,125,250,91,198,245,235,163,173,142,11,114,231,198,69,150,69,199,245,151,17,190,127,153,142,1,109,100,92,164,149,255,160,223,141,96,200,123,255,217,31,244,27,168,220,99,108,191,209,175,241,159,253,197,128,9,250,1,198,111,172,253,129,206,132,203,159,100,164,23,98,234,235,241,255,9,191,252,90,17,61,254,107,253,80,245,248,222,215,225,213,159,248,26,122,252,215,16,61,254,55,153,223,169,157,253,157,244,184,249,125,64,143,67,47,254,223,127,147,232,208,95,251,15,2,111,17,237,255,38,153,167,95,135,126,255,107,254,38,124,230,244,56,218,252,103,248,63,112,244,244,248,127,198,122,28,127,255,90,242,247,223,4,221,252,107,241,223,191,1,222,183,122,29,127,255,90,12,83,244,250,175,245,107,252,118,252,183,224,240,235,131,47,240,127,197,233,215,215,182,255,217,31,36,188,38,122,156,127,255,13,164,223,46,31,252,26,250,236,255,22,244,207,175,5,157,254,143,253,218,134,15,254,221,223,68,62,243,249,224,95,251,77,124,157,254,107,245,116,250,191,245,107,252,72,167,171,143,110,199,253,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,38,159,31,193,250,209,243,163,231,71,207,143,158,31,61,63,122,126,244,92,126,64,158,225,191,224,124,194,239,249,123,250,240,188,188,150,205,125,185,188,48,242,9,242,59,98,121,147,43,251,181,52,87,38,241,186,228,184,254,11,138,209,199,146,243,250,155,36,151,36,185,171,95,251,215,248,234,79,250,77,82,228,14,190,66,142,1,185,142,63,72,254,254,53,254,166,95,27,57,10,201,115,121,159,255,53,244,249,95,19,249,252,255,166,207,255,111,254,252,199,56,7,241,107,254,65,200,157,117,114,72,127,146,233,251,215,210,190,127,83,175,111,124,246,155,122,125,255,90,218,135,251,92,250,238,127,46,125,255,90,182,239,95,139,251,254,181,108,223,191,22,247,253,107,117,250,254,205,58,125,255,102,3,125,255,102,3,125,255,102,209,190,127,157,78,223,191,142,237,91,114,101,191,1,125,255,127,255,73,63,38,52,249,135,144,87,67,238,70,254,254,181,248,239,95,211,229,9,249,239,95,203,229,9,249,239,95,219,229,9,209,150,250,177,121,66,254,251,199,92,158,144,255,78,92,158,144,255,254,13,245,111,154,163,255,72,198,99,254,254,181,248,111,147,103,164,177,240,223,38,207,72,184,243,223,200,51,254,6,242,254,31,36,243,107,254,102,186,115,255,242,55,211,130,251,255,221,52,47,41,248,10,63,224,59,147,83,252,181,58,57,69,250,8,125,217,156,34,158,31,229,20,127,148,83,196,227,231,20,255,62,140,148,115,138,191,143,229,131,187,191,166,124,134,31,134,15,182,232,143,157,95,131,129,115,78,241,128,126,126,251,215,248,249,155,63,252,186,118,234,54,246,200,232,54,213,255,86,183,225,111,95,183,169,158,180,186,13,127,27,221,166,250,225,79,50,186,237,215,16,221,242,39,25,221,246,107,136,110,249,147,140,110,3,207,224,111,95,183,137,141,114,186,77,108,143,211,109,248,219,215,109,248,219,232,54,99,175,140,110,51,54,196,232,54,163,215,141,110,219,180,94,178,73,183,253,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ShadowShader.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ShadowShader.cid0))
			{
				this.SetLightColour(ref value);
				return true;
			}
			if ((id == ShadowShader.cid2))
			{
				this.SetShadowViewDirection(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ShadowShader.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ShadowShader.cid1))
			{
				this.SetShadowMapProjection(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ShadowShader.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ShadowShader.sid0))
			{
				this.ShadowSampler = value;
				return true;
			}
			if ((id == ShadowShader.sid1))
			{
				this.TextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ShadowShader.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ShadowShader.tid0))
			{
				this.ShadowMap = value;
				return true;
			}
			if ((id == ShadowShader.tid1))
			{
				this.TextureMap = value;
				return true;
			}
			return false;
		}
	}
}
